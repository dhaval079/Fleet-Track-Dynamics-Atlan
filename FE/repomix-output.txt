This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-14T10:43:43.877Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
public/
  index.html
  manifest.json
  robots.txt
src/
  components/
    Admin/
      AdminDashboard.js
    Booking/
      Booking.js
    context/
      AuthContext.js
      SearchContext.js
    Driver/
      DriverDashboard.js
      DriverLocationUpdate.js
    Rides/
      MyRides.js
    Track/
      Tracking.js
    User/
      UserProfile.js
    Vehicle/
      VehicleManagement.js
    Auth.js
    card.js
    cardContent.js
    ErrorPage.js
    Navbar.js
  config/
    api.js
  Pages/
    Home.js
  utils/
    api.js
    cn.js
  App.css
  App.js
  App.test.js
  index.css
  index.js
  logo.svg
  reportWebVitals.js
  setupTests.js
.gitignore
package.json
postcss.config.js
README.md
tailwind.config.js

================================================================
Repository Files
================================================================

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
<link rel="icon" href="%PUBLIC_URL%/maker.png" type="image/png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo.png" />
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&display=swap" rel="stylesheet">
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>LogistiQ</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: src/components/Admin/AdminDashboard.js
================
import React, { useState, useEffect } from 'react';
import { Line, Bar, Pie, Doughnut } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';
import { motion } from 'framer-motion';
import { Users, Truck, Calendar, DollarSign, TrendingUp, AlertTriangle, Activity, Clock, Star, Map, Settings, FileText, User } from 'lucide-react';
import DatePicker from 'react-datepicker';
import "react-datepicker/dist/react-datepicker.css";
import { apiCall } from '../../utils/api';

ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend);

const AdminDashboard = () => {
  const BACKEND_URL = "http://localhost:3001";

  const [activeTab, setActiveTab] = useState('overview');
  const [dashboardData, setDashboardData] = useState(null);
  const [statistics, setStatistics] = useState(null);
  const [users, setUsers] = useState([]);
  const [drivers, setDrivers] = useState([]);
  const [vehicles, setVehicles] = useState([]);
  const [driverActivity, setDriverActivity] = useState([]);
  const [bookingData, setBookingData] = useState([]);
  const [revenueAnalytics, setRevenueAnalytics] = useState([]);
  const [fleetData, setFleetData] = useState([]);
  const [tripAnalytics, setTripAnalytics] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [dateRange, setDateRange] = useState([new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), new Date()]);

  useEffect(() => {
    fetchAllData();
  }, [dateRange]);



  const fetchAllData = async () => {
    try {
      const [startDate, endDate] = dateRange;
  
      const fetchData = async (url, options = {}) => {
        const response = await fetch(`${BACKEND_URL}${url}`, {
          ...options,
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
              }        
            });
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        return response.json();
      };
  
      const [
        dashboardRes,
        statisticsRes,
        usersRes,
        driversRes,
        vehiclesRes,
        driverActivityRes,
        bookingDataRes,
        revenueAnalyticsRes,
        fleetRes,
        tripAnalyticsRes
      ] = await Promise.all([
        fetchData('/api/v2/admin/dashboard'),
        fetchData('/api/v2/admin/statistics'),
        fetchData('/api/v2/admin/users'),
        fetchData('/api/v2/admin/drivers'),
        fetchData('/api/v2/admin/vehicles'),
        fetchData(`/api/v2/admin/driver-activity?startDate=${startDate.toISOString()}&endDate=${endDate.toISOString()}`),
        fetchData(`/api/v2/admin/booking-data?startDate=${startDate.toISOString()}&endDate=${endDate.toISOString()}`),
        fetchData('/api/v2/admin/revenue-analytics', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ startDate: startDate.toISOString(), endDate: endDate.toISOString() })
        }),
        fetchData('/api/v2/admin/fleet'),
        fetchData(`/api/v2/admin/trip-analytics?startDate=${startDate.toISOString()}&endDate=${endDate.toISOString()}`)
      ]);
  
      setDashboardData(dashboardRes.data);
      setStatistics(statisticsRes.data);
      setUsers(usersRes.data);
      setDrivers(driversRes.data);
      setVehicles(vehiclesRes.data);
      setDriverActivity(driverActivityRes.data);
      setBookingData(bookingDataRes.data);
      setRevenueAnalytics(revenueAnalyticsRes.data);
      setFleetData(fleetRes.data);
      setTripAnalytics(tripAnalyticsRes.data);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };


  if (loading) return <div className="flex justify-center items-center h-screen">Loading...</div>;
  if (error) return <div className="text-red-500 text-center">Error: {error}</div>;

  const revenueChartData = {
    labels: revenueAnalytics.map(data => new Date(data._id).toLocaleDateString()),
    datasets: [
      {
        label: 'Daily Revenue',
        data: revenueAnalytics.map(data => data.totalRevenue),
        borderColor: 'rgb(75, 192, 192)',
        tension: 0.1
      }
    ]
  };

  const bookingStatusData = {
    labels: ['Pending', 'Completed', 'Cancelled'],
    datasets: [
      {
        data: [
          bookingData.filter(b => b.status === 'pending').length,
          bookingData.filter(b => b.status === 'completed').length,
          bookingData.filter(b => b.status === 'cancelled').length
        ],
        backgroundColor: ['#FFCE56', '#36A2EB', '#FF6384']
      }
    ]
  };

  const driverPerformanceData = {
    labels: driverActivity.map(d => d.name),
    datasets: [
      {
        label: 'Completed Bookings',
        data: driverActivity.map(d => d.completedBookings),
        backgroundColor: 'rgba(75, 192, 192, 0.6)'
      },
      {
        label: 'Cancelled Bookings',
        data: driverActivity.map(d => d.cancelledBookings),
        backgroundColor: 'rgba(255, 99, 132, 0.6)'
      }
    ]
  };

  const fleetStatusData = {
    labels: ['Available', 'In Use', 'Maintenance'],
    datasets: [{
      data: [
        fleetData.filter(v => v.status === 'available').length,
        fleetData.filter(v => v.status === 'in_use').length,
        fleetData.filter(v => v.status === 'maintenance').length
      ],
      backgroundColor: ['#4CAF50', '#2196F3', '#FFC107']
    }]
  };

  const avgTripTimeData = {
    labels: tripAnalytics?.avgTripTimeByHour.map(d => d.hour),
    datasets: [{
      label: 'Average Trip Time (minutes)',
      data: tripAnalytics?.avgTripTimeByHour.map(d => d.avgTime),
      borderColor: 'rgb(75, 192, 192)',
      tension: 0.1
    }]
  };

  return (
    <div className="p-6 bg-gray-100 min-h-screen">
      <h1 className="text-3xl font-bold mb-6 text-gray-800">Admin Dashboard</h1>
      
      <div className="mb-6">
        <DatePicker
          selectsRange={true}
          startDate={dateRange[0]}
          endDate={dateRange[1]}
          onChange={(update) => {
            setDateRange(update);
          }}
          className="p-2 border rounded"
        />
      </div>

      <div className="flex mb-6 space-x-4">
        <TabButton title="Overview" icon={<Activity />} activeTab={activeTab} setActiveTab={setActiveTab} />
        <TabButton title="Users" icon={<Users />} activeTab={activeTab} setActiveTab={setActiveTab} />
        <TabButton title="Drivers" icon={<User />} activeTab={activeTab} setActiveTab={setActiveTab} />
        <TabButton title="Bookings" icon={<Calendar />} activeTab={activeTab} setActiveTab={setActiveTab} />
        <TabButton title="Fleet" icon={<Truck />} activeTab={activeTab} setActiveTab={setActiveTab} />
        <TabButton title="Analytics" icon={<TrendingUp />} activeTab={activeTab} setActiveTab={setActiveTab} />
      </div>

      {activeTab === 'overview' && (
        <>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
            <DashboardCard icon={<Users />} title="Total Users" value={dashboardData.userCount} />
            <DashboardCard icon={<Truck />} title="Total Drivers" value={dashboardData.driverCount} />
            <DashboardCard icon={<Calendar />} title="Total Bookings" value={dashboardData.bookingCount} />
            <DashboardCard icon={<DollarSign />} title="Total Revenue" value={`$${statistics.totalRevenue.toFixed(2)}`} />
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <ChartCard title="Revenue Trend">
              <Line data={revenueChartData} options={{ responsive: true }} />
            </ChartCard>
            <ChartCard title="Booking Status Distribution">
              <Pie data={bookingStatusData} options={{ responsive: true }} />
            </ChartCard>
          </div>
        </>
      )}

      {activeTab === 'users' && (
        <DataTable title="User Management" data={users} fields={['_id', 'username', 'email', 'role', 'createdAt']} />
      )}

      {activeTab === 'drivers' && (
        <>
          <ChartCard title="Driver Performance">
            <Bar 
              data={driverPerformanceData} 
              options={{
                responsive: true,
                scales: {
                  x: { stacked: true },
                  y: { stacked: true }
                }
              }} 
            />
          </ChartCard>
          <DataTable title="Driver Management" data={drivers} fields={['_id', 'username', 'email', 'licenseNumber', 'experienceYears', 'isAvailable']} />
        </>
      )}

      {activeTab === 'bookings' && (
        <DataTable title="Booking Management" data={bookingData} fields={['_id', 'user.username', 'driver.username', 'status', 'price', 'createdAt']} />
      )}

      {activeTab === 'fleet' && (
        <>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <ChartCard title="Fleet Status">
              <Doughnut data={fleetStatusData} options={{ responsive: true }} />
            </ChartCard>
            <ChartCard title="Average Trip Time by Hour">
              <Line data={avgTripTimeData} options={{ responsive: true }} />
            </ChartCard>
          </div>
          <DataTable title="Fleet Management" data={fleetData} fields={['_id', 'make', 'model', 'year', 'licensePlate', 'status', 'lastMaintenanceDate']} />
        </>
      )}

      {activeTab === 'analytics' && (
        <>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
            <DashboardCard icon={<Clock />} title="Avg Trip Time" value={`${tripAnalytics?.overallAvgTripTime.toFixed(2)} mins`} />
            <DashboardCard icon={<TrendingUp />} title="Total Trips" value={tripAnalytics?.totalTrips} />
            <DashboardCard icon={<Star />} title="Avg Driver Rating" value={tripAnalytics?.avgDriverRating.toFixed(2)} />
            <DashboardCard icon={<AlertTriangle />} title="Incidents" value={tripAnalytics?.incidentCount} />
          </div>
          <DataTable title="Top Performing Drivers" data={tripAnalytics?.topDrivers || []} fields={['driverId', 'name', 'completedTrips', 'avgRating', 'totalRevenue']} />
        </>
      )}
    </div>
  );
};

const TabButton = ({ title, icon, activeTab, setActiveTab }) => (
  <button
    onClick={() => setActiveTab(title.toLowerCase())}
    className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors duration-200 ${
      activeTab === title.toLowerCase() ? 'bg-blue-500 text-white' : 'bg-white text-gray-600 hover:bg-gray-100'
    }`}
  >
    {icon}
    <span>{title}</span>
  </button>
);

const DashboardCard = ({ icon, title, value }) => (
  <motion.div 
    className="bg-white p-6 rounded-lg shadow-lg"
    whileHover={{ scale: 1.05 }}
    transition={{ duration: 0.3 }}
  >
    <div className="flex items-center justify-between">
      <div className="text-xl font-semibold text-gray-700">{title}</div>
      <div className="text-blue-500">{icon}</div>
    </div>
    <div className="text-3xl font-bold mt-2 text-gray-800">{value}</div>
  </motion.div>
);

const ChartCard = ({ title, children }) => (
  <div className="bg-white p-6 rounded-lg shadow-lg">
    <h2 className="text-xl font-semibold mb-4 text-gray-800">{title}</h2>
    {children}
  </div>
);

const DataTable = ({ title, data, fields }) => (
  <div className="bg-white p-6 rounded-lg shadow-lg">
    <h2 className="text-xl font-semibold mb-4 text-gray-800">{title}</h2>
    <div className="overflow-x-auto">
      <table className="min-w-full">
        <thead>
          <tr>
            {fields.map(field => (
              <th key={field} className="px-4 py-2 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                {field.split('.').pop()}
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {data.map((item, index) => (
            <tr key={index} className={index % 2 === 0 ? 'bg-gray-50' : 'bg-white'}>
              {fields.map(field => (
                <td key={field} className="px-4 py-2 whitespace-nowrap">
                  {field.split('.').reduce((obj, key) => obj && obj[key], item)}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </div>
);

export default AdminDashboard;

================
File: src/components/Booking/Booking.js
================
import React, { useState, useEffect, useRef } from 'react';
import { io } from 'socket.io-client';
import { MapPin } from 'lucide-react';

const GOOGLE_MAPS_API_KEY = 'AlzaSydVL9oXBRjlq0jaFb8R6J23Jz4fP17mrJA'; // Replace with actual API key
const BACKEND_URL = "http://localhost:3001";

const mapScriptUrl = `https://maps.gomaps.pro/maps/api/js?key=${GOOGLE_MAPS_API_KEY}&libraries=places,directions`;


const BookingComponent = () => {
  // Refs
  const mapRef = useRef(null);
  const originInputRef = useRef(null);
  const destinationInputRef = useRef(null);

  // Map related state
  const [mapInstance, setMapInstance] = useState(null);
  const [directionsService, setDirectionsService] = useState(null);
  const [directionsRenderer, setDirectionsRenderer] = useState(null);
  const [isMapLoaded, setIsMapLoaded] = useState(false);
  const [currentLocation, setCurrentLocation] = useState(null);

  // Booking related state
  const [distance, setDistance] = useState('');
  const [duration, setDuration] = useState('');
  const [estimatedPrice, setEstimatedPrice] = useState(0);
  const [userPrice, setUserPrice] = useState('');
  const [drivers, setDrivers] = useState([]);
  const [vehicles, setVehicles] = useState([]);
  const [selectedDriver, setSelectedDriver] = useState('');
  const [selectedVehicle, setSelectedVehicle] = useState('');
  const [matchedDriver, setMatchedDriver] = useState(null);
  const [bookingId, setBookingId] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [socket, setSocket] = useState(null);
  const [selectionMode, setSelectionMode] = useState('manual');
  const [isScheduleFuture, setIsScheduleFuture] = useState(false);
  const [scheduleDate, setScheduleDate] = useState('');
  const [scheduleTime, setScheduleTime] = useState('');

  // Helper Functions
  const getTomorrowDate = () => {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    return tomorrow.toISOString().split('T')[0];
  };

  const showError = (message) => {
    setError(message);
    if (message === "Invalid vehicle or vehicle does not belong to the driver") {
      alert("Select a different driver or vehicle, the selected vehicle does not belong to the driver");
    } else {
      alert(message);
    }
  };

  // Google Maps Related Functions
 // Add this function at the beginning of your component, before any other functions
// Google Maps Related Functions
const loadGoogleMapsScript = () => {
  return new Promise((resolve, reject) => {
    if (typeof window.google !== 'undefined') {
      resolve();
      return;
    }

    const existingScript = document.querySelector(`script[src*="maps.googleapis.com"]`);
    if (existingScript) {
      existingScript.remove();
    }

    const script = document.createElement('script');
    script.src = mapScriptUrl;
    script.async = true;
    script.defer = true;

    script.addEventListener('load', () => {
      setTimeout(resolve, 100);
    });

    script.addEventListener('error', () => {
      reject(new Error('Failed to load Google Maps script'));
    });

    document.head.appendChild(script);
  });
};

const initializeMap = async () => {
  try {
    if (!mapRef.current) return;

    let userLocation = { lat: 40.7128, lng: -74.0060 }; // Default to New York

    // Request user location
    await new Promise((resolve) => {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          userLocation = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          setCurrentLocation(userLocation);
          resolve();
        },
        (error) => {
          console.error('Location permission denied:', error);
          resolve(); // Continue with the default location if permission is denied
        }
      );
    });

    const map = new window.google.maps.Map(mapRef.current, {
      center: userLocation,
      zoom: 12,
      mapTypeControl: false,
      fullscreenControl: false,
      streetViewControl: false,
      zoomControl: true
    });

    const directionsServiceInstance = new window.google.maps.DirectionsService();
    const directionsRendererInstance = new window.google.maps.DirectionsRenderer({
      map,
      suppressMarkers: false,
      preserveViewport: false
    });

    setMapInstance(map);
    setDirectionsService(directionsServiceInstance);
    setDirectionsRenderer(directionsRendererInstance);

    const originAutocomplete = new window.google.maps.places.Autocomplete(originInputRef.current, { types: ['address'] });
    const destinationAutocomplete = new window.google.maps.places.Autocomplete(destinationInputRef.current, { types: ['address'] });

    originAutocomplete.addListener('place_changed', () => {
      const place = originAutocomplete.getPlace();
      if (place.geometry) {
        originInputRef.current.coordinates = {
          lat: place.geometry.location.lat(),
          lng: place.geometry.location.lng()
        };
      }
    });

    destinationAutocomplete.addListener('place_changed', () => {
      const place = destinationAutocomplete.getPlace();
      if (place.geometry) {
        destinationInputRef.current.coordinates = {
          lat: place.geometry.location.lat(),
          lng: place.geometry.location.lng()
        };
      }
    });
  } catch (error) {
    console.error('Error initializing map:', error);
    setError('Failed to initialize map. Please refresh the page.');
  }
};

// Replace your existing calculateRoute function with this one
const calculateRoute = () => {
  if (!directionsService || !directionsRenderer) {
    setError('Map services not initialized. Please try again.');
    return;
  }

  setIsLoading(true);
  setError(null);

  const origin = originInputRef.current?.value;
  const destination = destinationInputRef.current?.value;

  if (!origin || !destination || !selectedVehicle) {
    setError("Please enter origin, destination, and select a vehicle");
    setIsLoading(false);
    return;
  }

  const request = {
    origin: originInputRef.current.coordinates || origin,
    destination: destinationInputRef.current.coordinates || destination,
    travelMode: window.google.maps.TravelMode.DRIVING,
    optimizeWaypoints: true,
    provideRouteAlternatives: false,
    avoidHighways: false,
    avoidTolls: false
  };

  directionsService.route(request)
    .then(result => {
      directionsRenderer.setDirections(result);
      const route = result.routes[0];
      setDistance(route.legs[0].distance.text);
      setDuration(route.legs[0].duration.text);
      estimatePrice(route.legs[0].distance.value / 1000);
      setIsLoading(false);
    })
    .catch(error => {
      console.error('Direction Service Error:', error);
      setError("Couldn't calculate route. Please verify the addresses and try again.");
      setIsLoading(false);
    });
};

  const initializeAutocomplete = () => {
    try {
      if (!window.google || !originInputRef.current || !destinationInputRef.current) return;

      const originAutocomplete = new window.google.maps.places.Autocomplete(originInputRef.current);
      const destinationAutocomplete = new window.google.maps.places.Autocomplete(destinationInputRef.current);

      originAutocomplete.addListener('place_changed', () => {
        const place = originAutocomplete.getPlace();
        if (place.geometry) {
          originInputRef.current.coordinates = {
            lat: place.geometry.location.lat(),
            lng: place.geometry.location.lng()
          };
          console.log(originInputRef.current.coordinates)
        }
      });

      destinationAutocomplete.addListener('place_changed', () => {
        const place = destinationAutocomplete.getPlace();
        if (place.geometry) {
          destinationInputRef.current.coordinates = {
            lat: place.geometry.location.lat(),
            lng: place.geometry.location.lng()
          };
          console.log(destinationInputRef.current.coordinates)

        }
      });
    } catch (err) {
      setError('Error initializing autocomplete: ' + err.message);
    }
  };

  const updateMarkerPosition = (location) => {
    if (mapInstance && location) {
      const latLng = new window.google.maps.LatLng(location.lat, location.lng);

      if (!mapRef.current.marker) {
        mapRef.current.marker = new window.google.maps.Marker({
          map: mapInstance,
          position: latLng
        });
      } else {
        mapRef.current.marker.setPosition(latLng);
      }

      mapInstance.panTo(latLng);
    }
  };

  // Socket Related Functions
  const initializeSocket = () => {
    const newSocket = io(BACKEND_URL, {
      query: { token: localStorage.getItem('token') }
    });
    
    setSocket(newSocket);

    newSocket.on('locationUpdate', (location) => {
      setCurrentLocation(location);
      updateMarkerPosition(location);
    });

    newSocket.on('rideCompleted', () => {
      alert('Your ride has been completed!');
      setBookingId(null);
    });
  };

  // API Calls
  const fetchVehicles = async () => {
    try {
      const response = await fetch(`${BACKEND_URL}/api/v2/vehicles`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error('Failed to fetch vehicles');
      }

      const data = await response.json();
      setVehicles(data.vehicles);
    } catch (error) {
      console.error('Error fetching vehicles:', error);
      setError('Failed to load vehicles. Please try again.');
    }
  };

  const fetchDrivers = async () => {
    try {
      setIsLoading(true);
      const response = await fetch(`${BACKEND_URL}/api/v2/drivers`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });

      if (!response.ok) {
        throw new Error('Failed to fetch drivers');
      }

      const data = await response.json();
      setDrivers(data.drivers);
    } catch (error) {
      console.error('Error fetching drivers:', error);
      setError('Failed to load drivers. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  // Price Related Functions
  const getPricePerKm = (vehicleType) => {
    const prices = {
      sedan: 0.5,
      suv: 0.7,
      van: 0.8,
      truck: 0.9
    };
    return prices[vehicleType] || 0.5;
  };

  const estimatePrice = (distance) => {
    const selectedVehicleObj = vehicles.find(v => v._id === selectedVehicle);
    const basePrice = 5;
    const pricePerKm = selectedVehicleObj ? getPricePerKm(selectedVehicleObj.vehicleType) : 0.5;
    const price = basePrice + (distance * pricePerKm);
    setEstimatedPrice(price.toFixed(2));
    setUserPrice(price.toFixed(2));
  };


  // Update your useEffect to use the new async loading approach
  useEffect(() => {
    const initializeMaps = async () => {
      try {
        await loadGoogleMapsScript();
        await initializeMap();
        setIsMapLoaded(true);
      } catch (error) {
        console.error("Error loading maps:", error);
        setError("Failed to load Google Maps. Please refresh the page.");
      }
    };

    initializeMaps();
    initializeSocket();
    fetchVehicles();
    fetchDrivers();
    setScheduleDate(getTomorrowDate());
  
    return () => {
      if (socket) {
        socket.disconnect();
      }
    };
  }, []);

  // Driver Matching
  const findMatchingDriver = async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      if (!originInputRef.current?.coordinates) {
        throw new Error('Please select a valid origin from the dropdown');
      }

      const response = await fetch(`${BACKEND_URL}/api/v2/bookings/match`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: localStorage.getItem('userId'),
          pickup: {
            address: originInputRef.current.value,
            coordinates: originInputRef.current.coordinates
          },
          vehicleId: selectedVehicle
        }),
      });

      if (!response.ok) {
        throw new Error('Matching failed');
      }

      const data = await response.json();
      if (data.success) {
        setMatchedDriver(data.driver);
        setSelectedDriver(data.driver._id);
        alert("Driver matched successfully!");
      } else {
        throw new Error(data.message || 'Matching failed');
      }
    } catch (error) {
      setError("Failed to find matching driver: " + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // Booking Creation
  const bookRide = async () => {
    setIsLoading(true);
    setError(null);

    try {
      // Validation checks
      if (!originInputRef.current?.value || !destinationInputRef.current?.value) {
        throw new Error("Please enter both pickup and drop-off locations");
      }

      if (!selectedVehicle) {
        throw new Error("Please select a vehicle");
      }

      if (selectionMode === 'manual' && !selectedDriver) {
        throw new Error("Please select a driver");
      }

      if (selectionMode === 'automated' && !matchedDriver) {
        throw new Error("Please find a matching driver first");
      }

      if (!originInputRef.current?.coordinates || !destinationInputRef.current?.coordinates) {
        throw new Error("Please select valid locations from the dropdown suggestions");
      }

      const finalPrice = parseFloat(userPrice);
      if (isNaN(finalPrice) || finalPrice < parseFloat(estimatedPrice)) {
        throw new Error("Please enter a valid price (must be greater than or equal to the estimated price)");
      }

      // Schedule validation
      if (isScheduleFuture) {
        if (!scheduleDate || !scheduleTime) {
          throw new Error("Please select both date and time for future booking");
        }

        const scheduledDateTime = new Date(`${scheduleDate}T${scheduleTime}`);
        if (scheduledDateTime <= new Date()) {
          throw new Error("Scheduled time must be in the future");
        }
      }

      const bookingData = {
        userId: localStorage.getItem('userId'),
        driverId: selectionMode === 'manual' ? selectedDriver : matchedDriver._id,
        vehicleId: selectedVehicle,
        pickup: {
          address: originInputRef.current.value,
          coordinates: originInputRef.current.coordinates
        },
        dropoff: {
          address: destinationInputRef.current.value,
          coordinates: destinationInputRef.current.coordinates
        },
        price: finalPrice
      };

      if (isScheduleFuture) {
        const scheduledDateTime = new Date(`${scheduleDate}T${scheduleTime}`);
        bookingData.scheduledTime = scheduledDateTime.toISOString();
      }

      const endpoint = isScheduleFuture ? '/api/v2/bookings/future' : '/api/v2/bookings';

      const response = await fetch(`${BACKEND_URL}${endpoint}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify(bookingData),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || 'Booking failed');
      }

      if (data.success) {
        setError(null);
        alert(`Ride ${isScheduleFuture ? 'scheduled' : 'booked'} successfully! Booking ID: ${data.booking._id}`);
        setBookingId(data.booking._id);
      } else {
        throw new Error(data.message || 'Booking failed');
      }
    } catch (error) {
      const errorMessage = error.message || `Failed to ${isScheduleFuture ? 'schedule' : 'book'} ride`;
      showError(errorMessage);
      console.error('Booking error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // Effects
  useEffect(() => {
    loadGoogleMapsScript();
    initializeSocket();
    fetchVehicles();
    fetchDrivers();
    setScheduleDate(getTomorrowDate());

    return () => {
      if (socket) {
        socket.disconnect();
      }
      const script = document.querySelector(`script[src*="maps.gomaps.pro/maps/api"]`);
      if (script) {
        script.remove();
      }
    };
  }, []);
  
 return (
   <div className="min-h-screen bg-gray-50">
      <div className="w-full h-screen flex">
        {/* Left Panel */}
        <div className="w-[450px] h-full bg-white shadow-lg z-10 flex flex-col">
          {/* Header */}
          <div className="flex items-center space-x-3 p-6 border-b">
            <h1 className="text-xl font-bold text-gray-900">Book a Ride</h1>
          </div>

          <div className="p-6 flex-1 overflow-y-auto space-y-6">
            {/* Location Inputs */}
            <div className="space-y-4">
              <div className="relative">
                <div className="absolute left-4 top-3">
                  <MapPin className="w-5 h-5 text-blue-500" />
                </div>
                <input
                  ref={originInputRef}
                  type="text"
                  placeholder="Enter origin"
                  className="w-full pl-12 pr-4 py-3 rounded-lg border border-gray-200 focus:ring-2 focus:ring-blue-500 outline-none"
                />
              </div>
              <div className="relative">
                <div className="absolute left-4 top-3">
                  <MapPin className="w-5 h-5 text-red-500" />
                </div>
                <input
                  ref={destinationInputRef}
                  type="text"
                  placeholder="Enter destination"
                  className="w-full pl-12 pr-4 py-3 rounded-lg border border-gray-200 focus:ring-2 focus:ring-blue-500 outline-none"
                />
              </div>
            </div>

            {/* Vehicle Selection Dropdown */}
            <div>
              <select
                value={selectedVehicle}
                onChange={(e) => setSelectedVehicle(e.target.value)}
                className="w-full p-3 rounded-lg border border-gray-200 focus:ring-2 focus:ring-blue-500 outline-none appearance-none bg-white"
              >
                <option value="">Select a vehicle</option>
                {vehicles.map(vehicle => (
                  <option key={vehicle._id} value={vehicle._id}>
                    {vehicle.make} {vehicle.model} ({vehicle.vehicleType})
                  </option>
                ))}
              </select>
            </div>

            {/* Calculate Route Button */}
            <button
              onClick={calculateRoute}
              className="w-full py-3 bg-blue-500 text-white rounded-lg font-medium hover:bg-blue-600 transition-colors"
              disabled={isLoading}
            >
              {isLoading ? 'Calculating...' : 'Calculate Route'}
            </button>

            {/* Route Details */}
            {distance && duration && (
              <div className="space-y-2 p-4 bg-gray-50 rounded-lg">
                <div className="flex justify-between">
                  <span className="text-gray-600">Distance:</span>
                  <span className="font-medium">{distance}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Duration:</span>
                  <span className="font-medium">{duration}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Estimated Price:</span>
                  <span className="font-medium">${estimatedPrice}</span>
                </div>
                <input
                  type="number"
                  value={userPrice}
                  onChange={(e) => setUserPrice(e.target.value)}
                  className="w-full mt-2 p-3 rounded-lg border border-gray-200"
                  placeholder="Enter price (must be >= estimated price)"
                />
              </div>
            )}

            {/* Selection Mode Toggle */}
            <div className="space-y-2">
              <label className="text-gray-700 font-medium">Selection Mode:</label>
              <div className="grid grid-cols-2 gap-2 w-full">
                <button
                  onClick={() => setSelectionMode('manual')}
                  className={`p-3 rounded-lg font-medium transition-colors ${
                    selectionMode === 'manual'
                      ? 'bg-blue-500 text-white'
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                  }`}
                >
                  Manual
                </button>
                <button
                  onClick={() => setSelectionMode('automated')}
                  className={`p-3 rounded-lg font-medium transition-colors ${
                    selectionMode === 'automated'
                      ? 'bg-blue-500 text-white'
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                  }`}
                >
                  Automated
                </button>
              </div>
            </div>

          {/* Driver Selection or Find Driver */}
{selectionMode === 'manual' ? (
  <select
    value={selectedDriver}
    onChange={(e) => setSelectedDriver(e.target.value)}
    className="w-full p-3 rounded-lg border border-gray-200 focus:ring-2 focus:ring-blue-500 outline-none"
  >
    <option value="">Select a driver</option>
    {drivers.map(driver => (
      <option key={driver._id} value={driver._id}>{driver.username}</option>
    ))}
  </select>
) : (
  <button
    onClick={findMatchingDriver}
    className="w-full py-3 px-4 bg-green-500 text-white rounded-lg font-medium hover:bg-green-600 transition-colors disabled:bg-gray-300 disabled:cursor-not-allowed"
    disabled={isLoading}
  >
    {isLoading ? 'Finding Driver...' : 'Find Matching Driver'}
  </button>
)}

{/* Show matched driver info when available */}
{selectionMode === 'automated' && matchedDriver && (
  <div className="mt-4 p-4 bg-blue-50 rounded-lg border border-blue-100">
    <h3 className="font-semibold text-gray-900 mb-2">Matched Driver</h3>
    <div className="space-y-2">
      <p className="text-gray-700">
        <span className="font-medium">Name:</span> {matchedDriver.username}
      </p>
      <p className="text-gray-700">
        <span className="font-medium">Location:</span>{' '}
        {matchedDriver.currentLocation.coordinates[1]}, {matchedDriver.currentLocation.coordinates[0]}
      </p>
    </div>
  </div>
)}

            {/* Schedule Checkbox */}
            <div className="space-y-4">
              <label className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  checked={isScheduleFuture}
                  onChange={(e) => setIsScheduleFuture(e.target.checked)}
                  className="w-4 h-4 rounded text-blue-500"
                />
                <span className="text-gray-700">Schedule for later</span>
              </label>

              {isScheduleFuture && (
                <div className="space-y-2">
                  <input
                    type="date"
                    value={scheduleDate}
                    onChange={(e) => setScheduleDate(e.target.value)}
                    min={getTomorrowDate()}
                    className="w-full p-3 rounded-lg border border-gray-200"
                  />
                  <input
                    type="time"
                    value={scheduleTime}
                    onChange={(e) => setScheduleTime(e.target.value)}
                    className="w-full p-3 rounded-lg border border-gray-200"
                  />
                </div>
              )}
            </div>

            {/* Book Now Button */}
            <button
              onClick={bookRide}
              className="w-full py-3 bg-green-500 text-white rounded-lg font-medium hover:bg-green-600 transition-colors"
              disabled={isLoading || (selectionMode === 'automated' && !matchedDriver) || !selectedVehicle}
            >
              {isLoading ? 'Processing...' : isScheduleFuture ? 'Schedule Ride' : 'Book Now'}
            </button>
          </div>
        </div>

        {/* Map Section */}
        <div className="flex-1">
          <div className="h-full relative" ref={mapRef}>
            {/* Map controls will be rendered here by Google Maps */}
          </div>
        </div>
      </div>
    </div>
  );
};

export default BookingComponent;

================
File: src/components/context/AuthContext.js
================
import React, { createContext, useState, useContext, useCallback } from 'react';

const AuthContext = createContext(null);
const BACKEND_URL = "http://localhost:3001";

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(() => {
    const userData = localStorage.getItem('user');
    try {
      return userData ? JSON.parse(userData) : null;
    } catch {
      localStorage.removeItem('user');
      return null;
    }
  });

  const login = useCallback(async (userData) => {
    try {
      // Store full user data
      localStorage.setItem('user', JSON.stringify(userData));
      setUser(userData);
      return true;
    } catch (error) {
      console.error('Login error:', error);
      return false;
    }
  }, []);

  const logout = useCallback(async () => {
    try {
      const token = localStorage.getItem('token');
      await fetch(`${BACKEND_URL}/api/v2/auth/logout`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
    } catch (error) {
      console.error('Logout error:', error);
    } finally {
      // Clear all stored data
      
      localStorage.clear();
      
      setUser(null);
    }
  }, []);

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

================
File: src/components/context/SearchContext.js
================
import React, { createContext, useContext, useState } from 'react';

const SearchContext = createContext();

export const SearchProvider = ({ children }) => {
  const [searchQuery, setSearchQuery] = useState('');

  const value = {
    searchQuery,
    setSearchQuery
  };

  return (
    <SearchContext.Provider value={value}>
      {children}
    </SearchContext.Provider>
  );
};

export const useSearch = () => {
  const context = useContext(SearchContext);
  if (!context) {
    throw new Error('useSearch must be used within a SearchProvider');
  }
  return context;
};

================
File: src/components/Driver/DriverDashboard.js
================
import React, { useState, useEffect, useCallback } from 'react';
import { Link } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { Bar, Pie } from 'react-chartjs-2';
import { Chart as ChartJS, ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement } from 'chart.js';
import { useAuth } from '../context/AuthContext';

ChartJS.register(ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement);

const BACKEND_URL = "http://localhost:3001";

const DriverDashboard = () => {
  const { user } = useAuth();
  const [jobs, setJobs] = useState({ active: [], pending: [], incoming: [] });
  const [isAvailable, setIsAvailable] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState('active');
  const [analytics, setAnalytics] = useState({
    totalEarnings: 0,
    completedJobs: 0,
    averageRating: 0,
    jobStatusDistribution: {}
  });

  const fetchDriverInfo = useCallback(async () => {
    const driverId = localStorage.getItem('userId');
    const token = localStorage.getItem('token');

    try {
      const response = await fetch(`${BACKEND_URL}/api/v2/drivers/${driverId}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error('Failed to fetch driver info');
      }

      const data = await response.json();
      setIsAvailable(data.driver.isAvailable);
      return true;
    } catch (error) {
      console.error('Error fetching driver info:', error);
      throw new Error('Failed to load driver information');
    }
  }, []);

  const fetchJobs = useCallback(async () => {
    const token = localStorage.getItem('token');
    const email = user?.email;

    if (!email || !token) {
      throw new Error('Authentication required');
    }

    try {
      const response = await fetch(`${BACKEND_URL}/api/v2/drivers/current-jobs`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ email })
      });

      if (!response.ok) {
        if (response.status === 401) {
          throw new Error('Session expired');
        }
        throw new Error('Failed to fetch jobs');
      }

      const data = await response.json();
      
      const active = data.bookings.filter(job => ['en_route', 'goods_collected'].includes(job.status));
      const pending = data.bookings.filter(job => job.status === 'pending');
      const incoming = data.bookings.filter(job => job.status === 'assigned');
      
      setJobs({ active, pending, incoming });
      calculateAnalytics(data.bookings);
      return true;
    } catch (error) {
      console.error('Error fetching jobs:', error);
      throw error;
    }
  }, [user?.email]);

  const calculateAnalytics = useCallback((bookings) => {
    const completedJobs = bookings.filter(job => job.status === 'completed');
    const totalEarnings = completedJobs.reduce((sum, job) => sum + job.price, 0);
    
    const jobStatusDistribution = bookings.reduce((acc, job) => {
      acc[job.status] = (acc[job.status] || 0) + 1;
      return acc;
    }, {});

    setAnalytics({
      totalEarnings,
      completedJobs: completedJobs.length,
      averageRating: 4.5,
      jobStatusDistribution
    });
  }, []);

  const initializeDashboard = useCallback(async () => {
    setLoading(true);
    setError(null);

    try {
      await fetchDriverInfo();
      await fetchJobs();
    } catch (error) {
      console.error('Dashboard initialization error:', error);
      setError(error.message || 'Failed to initialize dashboard');
      return false;
    } finally {
      setLoading(false);
    }

    return true;
  }, [fetchDriverInfo, fetchJobs]);

  useEffect(() => {
    let intervalId;

    const setupDashboard = async () => {
      if (user?.email && localStorage.getItem('token')) {
        const success = await initializeDashboard();
        
        if (success) {
          // Set up polling only if initialization was successful
          intervalId = setInterval(async () => {
            try {
              await fetchJobs();
            } catch (error) {
              console.error('Polling error:', error);
              // Optionally handle polling errors
            }
          }, 30000);
        }
      }
    };

    setupDashboard();

    return () => {
      if (intervalId) {
        clearInterval(intervalId);
      }
    };
  }, [user?.email, initializeDashboard, fetchJobs]);

  const toggleAvailability = async () => {
    const driverId = localStorage.getItem('userId');
    const token = localStorage.getItem('token');

    try {
      const response = await fetch(`${BACKEND_URL}/api/v2/drivers/${driverId}/availability`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ isAvailable: !isAvailable })
      });

      if (!response.ok) {
        throw new Error('Failed to update availability');
      }

      const data = await response.json();
      setIsAvailable(data.driver.isAvailable);
    } catch (error) {
      console.error('Error updating availability:', error);
      alert('Failed to update availability. Please try again.');
    }
  };

  const updateJobStatus = async (jobId, newStatus) => {
    const token = localStorage.getItem('token');

    try {
      const response = await fetch(`${BACKEND_URL}/api/v2/drivers/jobs/${jobId}/status`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status: newStatus })
      });

      if (!response.ok) {
        throw new Error('Failed to update job status');
      }

      await fetchJobs();
    } catch (error) {
      console.error('Error updating job status:', error);
      alert('Failed to update job status. Please try again.');
    }
  };

  const acceptJob = async (jobId) => {
    const token = localStorage.getItem('token');

    try {
      const response = await fetch(`${BACKEND_URL}/api/v2/drivers/jobs/${jobId}/status`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status: 'assigned' })
      });

      if (!response.ok) {
        throw new Error('Failed to accept job');
      }

      await fetchJobs();
    } catch (error) {
      console.error('Error accepting job:', error);
      alert('Failed to accept job. Please try again.');
    }
  };

  // Early return for authentication check
  if (!user?.email || !localStorage.getItem('token')) {
    return (
      <div className="flex justify-center items-center h-screen">
        <div className="text-red-500 text-xl">Please log in to access the dashboard</div>
      </div>
    );
  }

  // Loading state
  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // Error state with retry button
  if (error) {
    return (
      <div className="flex flex-col justify-center items-center h-screen">
        <div className="text-red-500 text-xl mb-4">{error}</div>
        <button 
          onClick={initializeDashboard}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          Retry
        </button>
      </div>
    );
  }

  // Chart data and options
  const barChartData = {
    labels: ['Total Earnings', 'Completed Jobs'],
    datasets: [
      {
        label: 'Total Earnings',
        data: [analytics.totalEarnings, 0],
        backgroundColor: '#007A5E',
        yAxisID: 'earnings',
      },
      {
        label: 'Completed Jobs',
        data: [0, analytics.completedJobs],
        backgroundColor: '#D4AF37',
        yAxisID: 'jobs',
      },
    ],
  };

  const barChartOptions = {
    scales: {
      earnings: {
        type: 'linear',
        position: 'left',
        ticks: {
          callback: (value) => `$${value}`,
        },
        title: {
          display: true,
          text: 'Total Earnings ($)',
        },
      },
      jobs: {
        type: 'linear',
        position: 'right',
        ticks: {
          beginAtZero: true,
        },
        title: {
          display: true,
          text: 'Completed Jobs',
        },
        grid: {
          drawOnChartArea: false,
        },
      },
    },
  };

  const statusColors = {
    pending: '#FFA500',
    assigned: '#4169E1',
    en_route: '#32CD32',
    goods_collected: '#9370DB',
    completed: '#228B22'
  };

  const pieChartData = {
    labels: Object.keys(analytics.jobStatusDistribution),
    datasets: [
      {
        data: Object.values(analytics.jobStatusDistribution),
        backgroundColor: Object.keys(analytics.jobStatusDistribution)
          .map(status => statusColors[status] || '#000000'),
      },
    ],
  };

  // Job card component
  const JobCard = ({ job, isActive, isPending }) => (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
      className="bg-white shadow-lg rounded-lg p-6 mb-4"
    >
      <h3 className="text-xl font-semibold mb-2">Booking ID: {job._id}</h3>
      <p className="mb-1"><strong>Pickup:</strong> {job.pickup.address}</p>
      <p className="mb-1"><strong>Dropoff:</strong> {job.dropoff.address}</p>
      <p className="mb-2"><strong>Status:</strong> {job.status}</p>
      <p className="mb-2"><strong>Price:</strong> ${job.price.toFixed(2)}</p>
     
      {isActive && (
        <div className="flex space-x-2 mt-4">
          <button 
            onClick={() => updateJobStatus(job._id, 'en_route')}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition duration-300"
          >
            En Route
          </button>
          <button 
            onClick={() => updateJobStatus(job._id, 'goods_collected')}
            className="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600 transition duration-300"
          >
            Goods Collected
          </button>
          <button 
            onClick={() => updateJobStatus(job._id, 'completed')}
            className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition duration-300"
          >
            Complete
          </button>
        </div>
      )}
      {isPending && (
        <button 
          onClick={() => acceptJob(job._id)}
          className="bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600 transition duration-300 mt-4"
        >
          Accept Request
        </button>
      )}
    </motion.div>
  );

  // Main dashboard render
return (
  <div className="min-h-screen bg-[#f8fafc]">
    {/* Stats Cards */}
    <div className="grid grid-cols-3 gap-6 p-8">
      <div className="bg-white rounded-2xl p-6 shadow-lg hover:shadow-xl transition-shadow duration-300">
        <div className="flex items-center space-x-4 mb-4">
          <div className="w-12 h-12 rounded-full bg-green-100 flex items-center justify-center">
            <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <div>
            <p className="text-sm text-gray-500">Total Earnings</p>
            <div className="flex items-baseline space-x-2">
              <h2 className="text-2xl font-bold text-gray-900">${analytics.totalEarnings.toFixed(2)}</h2>
              <span className="text-sm text-green-500">↑ 12.5%</span>
            </div>
          </div>
        </div>
      </div>

      <div className="bg-white rounded-2xl p-6 shadow-lg hover:shadow-xl transition-shadow duration-300">
        <div className="flex items-center space-x-4 mb-4">
          <div className="w-12 h-12 rounded-full bg-blue-100 flex items-center justify-center">
            <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <div>
            <p className="text-sm text-gray-500">Completed Jobs</p>
            <div className="flex items-baseline space-x-2">
              <h2 className="text-2xl font-bold text-gray-900">{analytics.completedJobs}</h2>
              <span className="text-sm text-blue-500">This month</span>
            </div>
          </div>
        </div>
      </div>

      <div className="bg-white rounded-2xl p-6 shadow-lg hover:shadow-xl transition-shadow duration-300">
        <div className="flex items-center space-x-4 mb-4">
          <div className="w-12 h-12 rounded-full bg-yellow-100 flex items-center justify-center">
            <svg className="w-6 h-6 text-yellow-600" fill="currentColor" viewBox="0 0 20 20">
              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
            </svg>
          </div>
          <div>
            <p className="text-sm text-gray-500">Average Rating</p>
            <div className="flex items-baseline space-x-2">
              <h2 className="text-2xl font-bold text-gray-900">{analytics.averageRating.toFixed(1)}</h2>
              <span className="text-sm text-gray-500">(342 reviews)</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    {/* Charts Section */}
    <div className="grid grid-cols-3 gap-6 px-8 mb-8">
      <div className="col-span-2 bg-white rounded-2xl p-6 shadow-lg">
        <h2 className="text-xl font-bold text-gray-900 mb-6">Performance Analytics</h2>
        <div className="h-[300px]">
          <Bar data={barChartData} options={{
            ...barChartOptions,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                display: false
              }
            }
          }} />
        </div>
      </div>

      <div className="bg-white rounded-2xl p-6 shadow-lg">
        <h2 className="text-xl font-bold text-gray-900 mb-6">Job Distribution</h2>
        <Pie data={pieChartData} options={{
          plugins: {
            legend: {
              position: 'bottom'
            }
          }
        }} />
      </div>
    </div>

    {/* Job Management Section */}
    <div className="px-8 mb-8">
      <div className="bg-white rounded-2xl shadow-lg p-6">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-bold text-gray-900">Recent Jobs</h2>
          <div className="inline-flex p-1 bg-gray-100 rounded-xl">
            {['active', 'pending', 'incoming'].map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`px-6 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                  activeTab === tab
                    ? 'bg-white text-gray-900 shadow-sm'
                    : 'text-gray-500 hover:text-gray-900'
                }`}
              >
                {tab.charAt(0).toUpperCase() + tab.slice(1)} Jobs
              </button>
            ))}
          </div>
        </div>

        <AnimatePresence mode="wait">
          <motion.div
            key={activeTab}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="space-y-4"
          >
            {jobs[activeTab].length === 0 ? (
              <p className="text-center text-gray-500 py-8">No {activeTab} jobs at the moment.</p>
            ) : (
             // Inside the JobCard mapping section, replace the existing code with:
jobs[activeTab].map(job => (
  <motion.div
    key={job._id}
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    exit={{ opacity: 0, y: -20 }}
    className="bg-white border border-gray-100 rounded-xl p-6 hover:shadow-lg transition-all duration-300"
  >
    <div className="grid grid-cols-5 gap-4 items-center">
      <div>
        <p className="text-sm text-gray-500">Booking ID</p>
        <p className="font-mono text-sm text-gray-900">{job._id}</p>
      </div>
      <div>
        <p className="text-sm text-gray-500">From</p>
        <p className="text-sm text-gray-900">{job.pickup.address}</p>
      </div>
      <div>
        <p className="text-sm text-gray-500">To</p>
        <p className="text-sm text-gray-900">{job.dropoff.address}</p>
      </div>
      <div>
        <p className="text-sm text-gray-500">Price</p>
        <p className="text-sm font-medium text-gray-900">${job.price.toFixed(2)}</p>
      </div>
      <div className="flex justify-end space-x-2">
        {activeTab === 'active' && (
          <>
          <button 
              onClick={() => updateJobStatus(job._id, 'goods_collected')}
              className="px-4 py-2 text-sm font-medium text-white bg-blue-500 rounded-lg hover:bg-blue-600 transition-colors duration-200"
            >
              Goods Collected
            </button>
            <button 
              onClick={() => updateJobStatus(job._id, 'completed')}
              className="px-4 py-2 text-sm font-medium text-white bg-green-500 rounded-lg hover:bg-green-600 transition-colors duration-200"
            >
              Complete
            </button>
          </>
        )}
        {activeTab === 'pending' && (
          <button 
            onClick={() => acceptJob(job._id)}
            className="px-6 py-2 text-sm font-medium text-white bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg hover:from-purple-600 hover:to-purple-700 transition-all duration-200"
          >
            Accept Request
          </button>
        )}
        {activeTab === 'incoming' && (
          <>
            <button 
              onClick={() => updateJobStatus(job._id, 'en_route')}
              className="px-4 py-2 text-sm font-medium text-white bg-yellow-500 rounded-lg hover:bg-yellow-600 transition-colors duration-200"
            >
              En Route
            </button>
          
          </>
        )}
      </div>
    </div>
  </motion.div>
))
            )}
          </motion.div>
        </AnimatePresence>
      </div>
    </div>

    {/* Availability Toggle */}
    <div className="fixed bottom-8 right-8">
      <button 
        onClick={toggleAvailability}
        className={`px-6 py-3 rounded-xl text-white font-medium shadow-lg transition-all duration-300 ${
          isAvailable 
            ? 'bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700' 
            : 'bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700'
        }`}
      >
        {isAvailable ? 'Available for Jobs' : 'Not Available'}
      </button>
    </div>
  </div>
);
};

export default DriverDashboard;

================
File: src/components/Driver/DriverLocationUpdate.js
================
import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { MapPin, Navigation, AlertCircle, Check, Truck, ChevronDown } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

const API_KEY = 'AlzaSydVL9oXBRjlq0jaFb8R6J23Jz4fP17mrJA';
const BACKEND_URL = "http://localhost:3001";
const driverId = localStorage.getItem('userId');

const DriverLocationUpdate = () => {
  const [address, setAddress] = useState('');
  const [location, setLocation] = useState(null);
  const [bookings, setBookings] = useState([]);
  const [selectedBooking, setSelectedBooking] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [updateSuccess, setUpdateSuccess] = useState(false);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [currentBookingDetails, setCurrentBookingDetails] = useState(null);

  const autocompleteRef = useRef(null);
  const dropdownRef = useRef(null);
  const navigate = useNavigate();
  const { user } = useAuth();

  useEffect(() => {
    if (user) {
      fetchCurrentJobs();
      loadGoogleMapsScript();
    }

    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsDropdownOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [user]);

  const loadGoogleMapsScript = () => {
    const script = document.createElement('script');
    script.src = `https://maps.gomaps.pro/maps/api/js?key=${API_KEY}&libraries=places`;
    script.async = true;
    script.defer = true;
    script.onload = initAutocomplete;
    document.head.appendChild(script);
  };

  const initAutocomplete = () => {
    autocompleteRef.current = new window.google.maps.places.Autocomplete(
      document.getElementById('location-input')
    );
    autocompleteRef.current.addListener('place_changed', handlePlaceSelect);
  };

  const handlePlaceSelect = () => {
    const place = autocompleteRef.current.getPlace();
    if (place.geometry) {
      const lat = place.geometry.location.lat();
      const lng = place.geometry.location.lng();
      
      setLocation({
        lat: lat,
        lng: lng
      });
      setAddress(place.formatted_address);
  
      alert(
        `Selected Location Coordinates:\n` +
        `📍 Latitude: ${lat}\n` +
        `📍 Longitude: ${lng}\n\n` +
        `📌 Address: ${place.formatted_address}`
      );
  
      console.log('Selected coordinates:', { lat, lng });
    }
  };

  const fetchCurrentJobs = async () => {
    try {
      const response = await fetch(`${BACKEND_URL}/api/v2/drivers/current-jobs`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
        body: JSON.stringify({ email: user.email })
      });
      if (!response.ok) throw new Error('Failed to fetch current jobs');
      const data = await response.json();
      setBookings(data.bookings);
    } catch (error) {
      console.error('Error fetching current jobs:', error);
      setError('Failed to load current jobs');
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!location || !user || !selectedBooking) return;

    try {
      setLoading(true);
      const response = await fetch(`${BACKEND_URL}/api/v2/drivers/update-location/${driverId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
        body: JSON.stringify({
          latitude: location.lat,
          longitude: location.lng,
          bookingId: selectedBooking
        })
      });

      if (!response.ok) throw new Error('Failed to update location');
      alert('Location updated successfully');
      setUpdateSuccess(true);
      setTimeout(() => setUpdateSuccess(false), 3000);
    } catch (error) {
      console.error('Error updating location:', error);
      setError('Failed to update location. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleBookingSelect = (booking) => {
    setSelectedBooking(booking._id);
    setCurrentBookingDetails(booking);
    setIsDropdownOpen(false);
  };

  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="p-8 bg-white rounded-2xl shadow-xl text-center">
          <AlertCircle className="w-16 h-16 text-red-500 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-gray-900 mb-2">Authentication Required</h2>
          <p className="text-gray-600 mb-6">Please log in to update your location.</p>
          <button
            onClick={() => navigate('/login')}
            className="px-6 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-colors"
          >
            Go to Login
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-white rounded-2xl shadow-xl overflow-hidden"
        >
          {/* Header */}
          <div className="px-6 py-5 bg-gradient-to-r from-blue-600 to-indigo-600">
            <h2 className="text-2xl font-bold text-white flex items-center">
              <Navigation className="w-6 h-6 mr-2" />
              Update Location
            </h2>
          </div>

          <div className="p-6">
            <form onSubmit={handleSubmit} className="space-y-5">
              {/* Booking Selection */}
              <div className="relative" ref={dropdownRef}>
                <label className="block text-sm font-medium text-gray-700 mb-2">Select Delivery</label>
                <button
                  type="button"
                  onClick={() => setIsDropdownOpen(!isDropdownOpen)}
                  className="w-full bg-white px-4 py-3 border border-gray-300 rounded-xl text-left flex items-center justify-between hover:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all"
                >
                  <div className="flex items-center">
                    <Truck className="w-5 h-5 text-gray-400 mr-3" />
                    <span className={!selectedBooking ? 'text-gray-500' : 'text-gray-900'}>
                      {currentBookingDetails 
                        ? `${currentBookingDetails.pickup.address.split(',')[0]} → ${currentBookingDetails.dropoff.address.split(',')[0]}`
                        : 'Select a delivery'}
                    </span>
                  </div>
                  <ChevronDown className={`w-5 h-5 text-gray-400 transition-transform ${isDropdownOpen ? 'rotate-180' : ''}`} />
                </button>

                <AnimatePresence>
                  {isDropdownOpen && (
                    <motion.div
                      initial={{ opacity: 0, y: -10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      className="absolute z-10 w-full mt-2 bg-white rounded-xl shadow-lg border border-gray-200 max-h-60 overflow-auto"
                    >
                      {bookings.map((booking) => (
                        <button
                          key={booking._id}
                          type="button"
                          onClick={() => handleBookingSelect(booking)}
                          className="w-full px-4 py-3 text-left hover:bg-blue-50 flex items-center space-x-3 transition-colors"
                        >
                          <MapPin className="w-5 h-5 text-gray-400" />
                          <div>
                            <p className="font-medium text-gray-900">
                              {booking.pickup.address.split(',')[0]} → {booking.dropoff.address.split(',')[0]}
                            </p>
                            <p className="text-sm text-gray-500">ID: {booking._id.slice(-8)}</p>
                          </div>
                        </button>
                      ))}
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>

              {/* Location Input */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Current Location</label>
                <input
                  id="location-input"
                  type="text"
                  value={address}
                  onChange={(e) => setAddress(e.target.value)}
                  placeholder="Enter your current location"
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
                />
              </div>

              {/* Error Message */}
              {error && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="p-3 bg-red-50 rounded-xl border border-red-200 text-red-700 text-sm"
                >
                  {error}
                </motion.div>
              )}

              {/* Submit Button */}
              <button
                type="submit"
                disabled={loading || !location || !selectedBooking}
                className={`w-full px-4 py-3 rounded-xl text-white font-medium flex items-center justify-center space-x-2 transition-all ${
                  loading || !location || !selectedBooking
                    ? 'bg-gray-400 cursor-not-allowed'
                    : 'bg-blue-600 hover:bg-blue-700'
                }`}
              >
                {loading ? (
                  <>
                    <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin" />
                    <span>Updating...</span>
                  </>
                ) : updateSuccess ? (
                  <>
                    <Check className="w-5 h-5" />
                    <span>Updated Successfully</span>
                  </>
                ) : (
                  <>
                    <Navigation className="w-5 h-5" />
                    <span>Update Location</span>
                  </>
                )}
              </button>
            </form>
          </div>
        </motion.div>
      </div>
    </div>
  );
};

export default DriverLocationUpdate;

================
File: src/components/Rides/MyRides.js
================
import React, { useState, useEffect } from 'react';
import { format } from 'date-fns';
import { motion } from 'framer-motion';
import { MapPin, Calendar, Clock, Truck, User, DollarSign, Tag } from 'lucide-react';
import { useAuth } from '../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import { useSearch } from '../context/SearchContext';

const statusOptions = ['all', 'pending', 'assigned', 'en_route', 'goods_collected', 'completed', 'cancelled', 'scheduled'];
const BACKEND_URL = "http://localhost:3001";


const getStatusColor = (status) => {
  switch (status) {
    case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-300';
    case 'completed': return 'bg-green-100 text-green-800 border-green-300';
    case 'cancelled': return 'bg-red-100 text-red-800 border-red-300';
    case 'scheduled': return 'bg-blue-100 text-blue-800 border-blue-300';
    case 'assigned': return 'bg-purple-100 text-purple-800 border-purple-300';
    case 'en_route': return 'bg-indigo-100 text-indigo-800 border-indigo-300';
    case 'goods_collected': return 'bg-teal-100 text-teal-800 border-teal-300';
    default: return 'bg-gray-100 text-gray-800 border-gray-300';
  }
};

const MyRides = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [bookings, setBookings] = useState([]);
  const { searchQuery } = useSearch();

  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [filter, setFilter] = useState('all');

  useEffect(() => {
    const userEmail = localStorage.getItem('email');
    const token = localStorage.getItem('token');

    if (!userEmail || !token) {
      navigate('/login');
      return;
    }

    fetchUserBookings(userEmail, token);
  }, [navigate]);

  const fetchUserBookings = async (userEmail, token) => {
    try {
      setLoading(true);
      setError(null);

      const response = await fetch(`${BACKEND_URL}/api/v2/bookings/userbookings`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ email: userEmail })
      });

      if (!response.ok) {
        if (response.status === 401) {
          localStorage.removeItem('token');
          localStorage.removeItem('email');
          navigate('/login');
          return;
        }
        throw new Error('Failed to fetch bookings');
      }

      const data = await response.json();
      if (data.success) {
        setBookings(data.bookings);
      } else {
        throw new Error(data.message || 'Failed to fetch bookings');
      }
    } catch (error) {
      setError('Error fetching bookings. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (dateString) => {
    try {
      return format(new Date(dateString), "MMMM d, yyyy 'at' h:mm a");
    } catch (error) {
      return 'Invalid Date';
    }
  };

  const filteredBookings = bookings?.filter(booking => {
    const matchesStatus = filter === 'all' || booking.status === filter;
    
    if (!searchQuery) return matchesStatus;

    const searchLower = searchQuery.toLowerCase();
    const pickupMatch = booking.pickup.address.toLowerCase().includes(searchLower);
    const dropoffMatch = booking.dropoff.address.toLowerCase().includes(searchLower);

    return matchesStatus && (pickupMatch || dropoffMatch);
  }) || [];

  if (error) {
    return (
      <div className="text-center mt-8 text-red-600 bg-red-100 p-4 rounded-lg shadow">
        <h2 className="text-xl font-bold mb-2">Error</h2>
        <p>{error}</p>
        <button 
          onClick={() => fetchUserBookings(localStorage.getItem('email'), localStorage.getItem('token'))}
          className="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
        >
          Retry
        </button>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-6 py-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-8">My Rides</h1>

        {/* Stats Overview */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8"
        >
          <div className="bg-white rounded-xl shadow-sm p-6">
            <h3 className="text-2xl font-bold text-blue-600">{bookings.length}</h3>
            <p className="text-gray-600">Total Rides</p>
          </div>
          <div className="bg-white rounded-xl shadow-sm p-6">
            <h3 className="text-2xl font-bold text-green-600">
              {bookings.filter(b => b.status === 'completed').length}
            </h3>
            <p className="text-gray-600">Completed</p>
          </div>
          <div className="bg-white rounded-xl shadow-sm p-6">
            <h3 className="text-2xl font-bold text-yellow-600">
              {bookings.filter(b => ['pending', 'assigned', 'en_route'].includes(b.status)).length}
            </h3>
            <p className="text-gray-600">In Progress</p>
          </div>
          <div className="bg-white rounded-xl shadow-sm p-6">
            <h3 className="text-2xl font-bold text-red-600">
              {bookings.filter(b => b.status === 'cancelled').length}
            </h3>
            <p className="text-gray-600">Cancelled</p>
          </div>
        </motion.div>

        {/* Status Filters */}
        <div className="flex flex-wrap gap-2 mb-8">
          {statusOptions.map((status) => (
            <motion.button
              key={status}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setFilter(status)}
              className={`px-6 py-2.5 rounded-full text-sm font-medium transition-all ${
                filter === status
                  ? 'bg-blue-600 text-white shadow-md'
                  : 'bg-white text-gray-600 hover:bg-gray-50 border border-gray-200'
              }`}
            >
              {status.charAt(0).toUpperCase() + status.slice(1).replace('_', ' ')}
            </motion.button>
          ))}
        </div>

        {/* Bookings Grid */}
        {filteredBookings.length === 0 ? (
          <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="text-center py-12 bg-white rounded-xl shadow-sm"
    >
      {searchQuery ? (
        <div>
          <p className="text-gray-600 text-lg mb-2">No rides found matching "{searchQuery}"</p>
          <p className="text-gray-500">Try a different search term or filter</p>
        </div>
      ) : (
        <div>
          {/* <p className="text-gray-600 text-lg mb-2">No rides found</p>
          <p className="text-gray-500">Try selecting a different status filter</p> */}
        </div>
      )}
    </motion.div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredBookings.map((booking, index) => (
              <motion.div
                key={booking._id}
                initial={{ opacity: 0, y: 50 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
                className="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300"
              >
                {/* Card Header */}
                <div className="p-6 border-b border-gray-100">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <p className="text-sm text-gray-500 mb-1">Booking ID</p>
                      <h3 className="text-lg font-semibold text-gray-900">#{booking._id}</h3>
                    </div>
                    <span className={`px-4 py-1.5 rounded-full text-sm font-medium ${getStatusColor(booking.status)}`}>
                      {booking.status.charAt(0).toUpperCase() + booking.status.slice(1).replace('_', ' ')}
                    </span>
                  </div>

                  {/* Route Information */}
                  <div className="relative pl-8 mt-6">
                    <div className="absolute left-2 top-0 bottom-0 w-0.5 bg-gray-200"/>
                    <div className="relative mb-6">
                      <div className="absolute left-[-1.25rem] w-3 h-3 rounded-full bg-blue-500"/>
                      <p className="text-sm text-gray-500">From</p>
                      <p className="text-gray-900">{booking.pickup.address}</p>
                    </div>
                    <div className="relative">
                      <div className="absolute left-[-1.25rem] w-3 h-3 rounded-full bg-red-500"/>
                      <p className="text-sm text-gray-500">To</p>
                      <p className="text-gray-900">{booking.dropoff.address}</p>
                    </div>
                  </div>
                </div>

                {/* Card Details */}
                <div className="p-6 bg-gray-50">
                  <div className="grid grid-cols-2 gap-4">
                    {booking.driver && (
                      <div>
                        <div className="flex items-center mb-1">
                          <User className="w-4 h-4 text-gray-400 mr-2"/>
                          <p className="text-sm text-gray-500">Driver</p>
                        </div>
                        <p className="text-gray-900 font-medium">{booking.driver.username}</p>
                      </div>
                    )}
                    {booking.vehicle && (
                      <div>
                        <div className="flex items-center mb-1">
                          <Truck className="w-4 h-4 text-gray-400 mr-2"/>
                          <p className="text-sm text-gray-500">Vehicle</p>
                        </div>
                        <p className="text-gray-900 font-medium">
                          {booking.vehicle.make} {booking.vehicle.model}
                        </p>
                      </div>
                    )}
                    {booking.vehicle && (
                      <div>
                        <div className="flex items-center mb-1">
                          <Tag className="w-4 h-4 text-gray-400 mr-2"/>
                          <p className="text-sm text-gray-500">License</p>
                        </div>
                        <p className="text-gray-900 font-medium">{booking.vehicle.licensePlate}</p>
                      </div>
                    )}
                    <div>
                      <div className="flex items-center mb-1">
                        <DollarSign className="w-4 h-4 text-gray-400 mr-2"/>
                        <p className="text-sm text-gray-500">Price</p>
                      </div>
                      <p className="text-emerald-600 font-semibold">${booking.price?.toFixed(2)}</p>
                    </div>
                  </div>

                  <div className="mt-4 pt-4 border-t border-gray-200">
                    <div className="flex items-center">
                      <Calendar className="w-4 h-4 text-gray-400 mr-2"/>
                      <p className="text-sm text-gray-500">{formatDate(booking.createdAt)}</p>
                    </div>
                    {booking.status === 'scheduled' && booking.scheduledTime && (
                      <div className="flex items-center mt-2">
                        <Clock className="w-4 h-4 text-gray-400 mr-2"/>
                        <p className="text-sm text-gray-500">{formatDate(booking.scheduledTime)}</p>
                      </div>
                    )}
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default MyRides;

================
File: src/components/Track/Tracking.js
================
import React, { useState, useEffect, useRef } from 'react';
import io from 'socket.io-client';

const API_KEY = 'AlzaSydVL9oXBRjlq0jaFb8R6J23Jz4fP17mrJA';

const BACKEND_URL = "http://localhost:3001";


const TrackingComponent = () => {
  const [bookingId, setBookingId] = useState('');
  const [rideDetails, setRideDetails] = useState(null);
  const [currentLocation, setCurrentLocation] = useState(null);
  const [map, setMap] = useState(null);
  const [markers, setMarkers] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [socketConnected, setSocketConnected] = useState(false);
  const [locationGranted, setLocationGranted] = useState(false);
  const mapRef = useRef(null);
  const socketRef = useRef(null);
  let userLocation = { lat: 40.7128, lng: -74.0060 };


  useEffect(() => {
    // Check location permissions on component mount
    requestLocationPermission();
  }, []);

  // Function to request location permission
  const requestLocationPermission = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          userLocation = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          setCurrentLocation(userLocation);
          setLocationGranted(true);
  
          // Center map on user location if map is initialized
          if (map) {
            map.setCenter(userLocation);
            updateMarkerPosition('user', userLocation);
          }
        },
        (error) => {
          console.error("Error getting location:", error);
          setError("Location permission denied.");
        }
      );
    } else {
      setError("Geolocation is not supported by this browser.");
    }
  };
  

  // Replace the socket initialization useEffect with this:
  useEffect(() => {
    // Clear any existing socket connection
    if (socketRef.current) {
      socketRef.current.removeAllListeners();
      socketRef.current.close();
    }

    try {
      // Configure socket with proper options
      socketRef.current = io('http://localhost:3001', {
        path: '/socket.io',
        transports: ['websocket', 'polling'],
        auth: { token: localStorage.getItem('token') }
      });
      // Connection event handlers
      socketRef.current.on('connect', () => {
        console.log('Socket connected successfully');
        setSocketConnected(true);
        //setError(null);

        // Resubscribe to booking updates if we were tracking one
        if (rideDetails?._id) {
          socketRef.current.emit('subscribe', rideDetails._id);
        }
      });

      socketRef.current.on('connect_error', (err) => {
        console.error('Socket connection error:', err);
        setSocketConnected(false);
        //setError(`Connection error: ${err.message}. Please check if the server is running.`);
      });

      socketRef.current.on('error', (err) => {
        console.error('Socket error:', err);
        //setError(`Socket error: ${err.message}`);
      });

      socketRef.current.on('disconnect', (reason) => {
        console.log('Socket disconnected:', reason);
        setSocketConnected(false);
        if (reason === 'io server disconnect') {
          // Server initiated disconnect, try to reconnect
          socketRef.current.connect();
        }
      });

      socketRef.current.on('locationUpdate', (location) => {
        console.log('Received location update:', location);
        if (location && location.lat && location.lng) {
          setCurrentLocation(location);
          updateMarkerPosition('current', location);
        }
      });

      // Cleanup function
      return () => {
        if (socketRef.current) {
          socketRef.current.removeAllListeners();
          socketRef.current.close();
          socketRef.current = null;
        }
      };
    } catch (error) {
      console.error('Socket initialization error:', error);
      //setError('Failed to initialize socket connection');
      setSocketConnected(false);
    }
  }, []); // Empty dependency array to run only once on mount



  useEffect(() => {
    loadGoogleMapsScript();
  }, []);

  const loadGoogleMapsScript = () => {
    if (window.google) {
      initMap();
      return;
    }

    const script = document.createElement('script');
    script.src = `https://maps.gomaps.pro/maps/api/js?key=${API_KEY}`;
    script.async = true;
    script.defer = true;
    script.onload = initMap;
    script.onerror = () => setError('Failed to load map');
    document.head.appendChild(script);
  };

  const initMap = () => {
    if (!mapRef.current) return;

    const mapInstance = new window.google.maps.Map(mapRef.current, {
      center: userLocation,
      zoom: 12,
      zoomControl: true,
      mapTypeControl: false,
      scaleControl: true,
      streetViewControl: false,
      rotateControl: false,
      fullscreenControl: true
    });

    setMap(mapInstance);
  };


  const updateMap = (booking) => {
    if (!map) return;

    const bounds = new window.google.maps.LatLngBounds();

    // Clear existing markers
    Object.values(markers).forEach(marker => marker.setMap(null));
    setMarkers({});

    // Add pickup marker (Red pin like Google Maps)
    const pickupMarker = new window.google.maps.Marker({
      position: booking.pickup.coordinates,
      map: map,
      icon: {
        url: 'https://maps.gstatic.com/mapfiles/api-3/images/spotlight-poi2.png',
        scaledSize: new window.google.maps.Size(27, 43),
        origin: new window.google.maps.Point(0, 0),
        anchor: new window.google.maps.Point(13, 42)
      },
      title: 'Pickup Location'
    });
    bounds.extend(booking.pickup.coordinates);

    // Add dropoff marker (Red pin like Google Maps)
    const dropoffMarker = new window.google.maps.Marker({
      position: booking.dropoff.coordinates,
      map: map,
      icon: {
        url: 'https://maps.gstatic.com/mapfiles/api-3/images/spotlight-poi2.png',
        scaledSize: new window.google.maps.Size(27, 43),
        origin: new window.google.maps.Point(0, 0),
        anchor: new window.google.maps.Point(13, 42)
      },
      title: 'Dropoff Location'
    });
    bounds.extend(booking.dropoff.coordinates);

    // Create route path with Google Maps style
    const routePath = new window.google.maps.Polyline({
      path: [booking.pickup.coordinates, booking.dropoff.coordinates],
      geodesic: true,
      strokeColor: '#DE3618', // Google Maps route red
      strokeOpacity: 1.0,
      strokeWeight: 4
    });
    routePath.setMap(map);

    map.fitBounds(bounds, { padding: { top: 50, right: 50, bottom: 50, left: 50 } });

    setMarkers({
      pickup: pickupMarker,
      dropoff: dropoffMarker,
      route: routePath
    });
  };

  const updateMarkerPosition = (markerType, position) => {
    if (!map) return;

    if (markers[markerType]) {
      markers[markerType].setPosition(position);
    } else {
      // Custom car marker for driver
      const driverIcon = {
        path: 'M 12,2 C 8.134,2 5,5.134 5,9 c 0,5.25 7,13 7,13 0,0 7,-7.75 7,-13 0,-3.866 -3.134,-7 -7,-7 z',
        fillColor: '#4285F4', // Google blue
        fillOpacity: 1,
        strokeColor: '#FFFFFF',
        strokeWeight: 2,
        scale: 2,
        anchor: new window.google.maps.Point(12, 22),
        labelOrigin: new window.google.maps.Point(12, 10)
      };

      const newMarker = new window.google.maps.Marker({
        position: position,
        map: map,
        icon: driverIcon,
        label: {
          text: 'D',
          fontSize: '16px',
          className: 'driver-label'
        },
        animation: window.google.maps.Animation.DROP,
        title: 'Driver Location',
        zIndex: 1000 // Ensure driver marker stays on top
      });

      setMarkers(prev => ({ ...prev, [markerType]: newMarker }));
    }
  };

  // Update the fetchRideDetails function:
  const fetchRideDetails = async () => {
    if (!bookingId.trim()) {
      //setError('Please enter a booking ID');
      return;
    }

    setIsLoading(true);
    //setError(null);

    try {
      const response = await fetch(`${BACKEND_URL}/api/v2/bookings/${bookingId}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json'
        },
        credentials: 'include' // Important if your server requires credentials
      });

      if (!response.ok) {
        throw new Error(response.status === 404 ? 'Booking not found' : 'Failed to fetch ride details');
      }

      const data = await response.json();
      setRideDetails(data.booking);

      // Subscribe to updates using the socket reference
      if (socketRef.current && socketConnected) {
        console.log('Subscribing to booking updates:', bookingId);
        socketRef.current.emit('subscribe', bookingId);
      } else {
        console.warn('Socket not connected, unable to subscribe to updates');
        //setError('Warning: Real-time updates may be unavailable');
      }

      updateMap(data.booking);
    } catch (error) {
      console.error('Error fetching ride details:', error);
      //setError(error.message);
    } finally {
      setIsLoading(false);
    }
  };

  const getDriverLocation = async () => {
    if (!rideDetails?._id) return;

    setIsLoading(true);
    //setError(null);

    try {
      const response = await fetch(`${BACKEND_URL}/api/v2/drivers/current-location/${rideDetails._id}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        }
      });

      if (!response.ok) throw new Error('Failed to fetch driver location');

      const data = await response.json();
      if (data.success && data.driverLocation) {
        const location = {
          lat: data.driverLocation[1],
          lng: data.driverLocation[0]
        };
        updateMarkerPosition('driver', location);
      } else {
        throw new Error(data.message || 'Driver location not available');
      }
    } catch (error) {
      console.error('Error fetching driver location:', error);
      //setError(error.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col md:flex-row h-screen bg-gray-50">
      {/* Left Panel - Made scrollable independently on mobile */}
      <div className="w-full md:w-[480px] h-[45vh] md:h-full bg-white shadow-xl z-10 overflow-y-auto order-2 md:order-1">
        <div className="p-4 md:p-8">
          <h1 className="text-2xl md:text-3xl font-bold text-gray-900 mb-6 md:mb-8">Track My Ride</h1>

          {/* Search Section */}
          <div className="mb-6 md:mb-8">
            <div className="relative group">
              <input
                type="text"
                value={bookingId}
                onChange={(e) => setBookingId(e.target.value)}
                placeholder="Enter Booking ID"
                className="w-full px-4 md:px-6 py-3 md:py-4 bg-gray-50 border-2 border-gray-100 rounded-xl focus:outline-none focus:border-indigo-500 transition-all duration-300 text-gray-900 placeholder-gray-400"
              />
            </div>
            <button
              onClick={fetchRideDetails}
              disabled={isLoading}
              className="mt-3 md:mt-4 w-full px-4 md:px-6 py-3 md:py-4 bg-gradient-to-r from-indigo-500 to-blue-500 text-white rounded-xl font-medium transform hover:translate-y-[-2px] hover:shadow-lg transition-all duration-300 disabled:opacity-50"
            >
              {isLoading ? (
                <span className="flex items-center justify-center">
                  <span className="w-4 h-4 md:w-5 md:h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></span>
                  Searching...
                </span>
              ) : (
                'Track Ride'
              )}
            </button>

            {error && (
              <div className="mt-3 md:mt-4 p-3 md:p-4 bg-red-50 border border-red-100 rounded-xl">
                <p className="text-red-600 text-sm">{error}</p>
              </div>
            )}
          </div>


          {/* Ride Details */}
          {rideDetails && (
            <div className="space-y-4 md:space-y-6 animate-fadeIn">
              <div className="p-3 md:p-4 bg-gray-50 rounded-xl">
                <div className="text-sm text-gray-500">Tracking ID</div>
                <div className="font-mono text-gray-900 text-sm md:text-base">{bookingId}</div>
              </div>

              <div className="relative pl-8 py-4">
                <div className="absolute left-0 top-6 w-[2px] h-[calc(100%-48px)] bg-gradient-to-b from-indigo-500 to-blue-500 rounded"></div>

                <div className="relative mb-6 md:mb-8">
                  <div className="absolute left-[-15px] w-6 h-6 md:w-8 md:h-8 bg-indigo-500 rounded-full flex items-center justify-center shadow-lg">
                    <div className="w-2 h-2 bg-white rounded-full animate-ping"></div>
                  </div>
                  <div className="text-sm text-gray-500 mb-1">From</div>
                  <div className="text-gray-900 font-medium text-sm md:text-base">{rideDetails.pickup.address}</div>
                </div>

                <div className="relative">
                  <div className="absolute left-[-15px] w-6 h-6 md:w-8 md:h-8 bg-blue-500 rounded-full flex items-center justify-center shadow-lg">
                    <div className="w-2 h-2 bg-white rounded-full animate-ping"></div>
                  </div>
                  <div className="text-sm text-gray-500 mb-1">To</div>
                  <div className="text-gray-900 font-medium text-sm md:text-base">{rideDetails.dropoff.address}</div>
                </div>
              </div>

              <div className="flex items-center justify-between p-3 md:p-4 bg-gray-50 rounded-xl">
                <span className="text-sm text-gray-500">Status</span>
                <span className="px-3 md:px-4 py-1.5 md:py-2 bg-indigo-100 text-indigo-700 rounded-full text-sm font-medium capitalize">
                  {rideDetails.status}
                </span>
              </div>

              {rideDetails.status !== 'completed' && (
                <button
                  onClick={getDriverLocation}
                  disabled={isLoading}
                  className="w-full px-4 md:px-6 py-3 md:py-4 bg-gradient-to-r from-blue-500 to-indigo-500 text-white rounded-xl font-medium transform hover:translate-y-[-2px] hover:shadow-lg transition-all duration-300 disabled:opacity-50"
                >
                  {isLoading ? (
                    <span className="flex items-center justify-center">
                      <span className="w-4 h-4 md:w-5 md:h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></span>
                      Locating Driver...
                    </span>
                  ) : (
                    'Get Driver Location'
                  )}
                </button>
              )}
            </div>
          )}
        </div>
      </div>

      {/* Map Panel - Moved to top on mobile */}
      <div className="flex-1 h-[55vh] md:h-full relative order-1 md:order-2">
        <div ref={mapRef} className="absolute inset-0 z-0 w-full h-full"></div>
      </div>
    </div>
  );
};

export default TrackingComponent;

================
File: src/components/User/UserProfile.js
================
import React from 'react';
import { UserCircle, Truck, MapPin, Mail, Star } from 'lucide-react';
import Card from '../card';
import { CardContent, CardHeader, CardTitle } from '../cardContent';

const UserProfile = () => {
  const user = JSON.parse(localStorage.getItem('user'));

  if (!user) return <div>User not found. Please log in.</div>;

  return (
    <div className="container mx-auto p-4">
      <Card className="max-w-md mx-auto">
        <CardHeader>
          <CardTitle className="flex items-center">
            <UserCircle className="w-8 h-8 mr-2" />
            {user.username}
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            <p className="flex items-center"><Mail className="w-4 h-4 mr-2" /> {user.email}</p>
            <p className="flex items-center"><Star className="w-4 h-4 mr-2" /> Role: {user.role}</p>
            {user.role === 'driver' && (
              <>
                <p className="flex items-center"><Truck className="w-4 h-4 mr-2" /> License: {user.licenseNumber}</p>
                <p className="flex items-center"><Star className="w-4 h-4 mr-2" /> Experience: {user.experienceYears} years</p>
                {user.currentLocation && (
                  <p className="flex items-center"><MapPin className="w-4 h-4 mr-2" /> Location: {user.currentLocation.coordinates.join(', ')}</p>
                )}
                <p className="flex items-center"><Star className="w-4 h-4 mr-2" /> Available: {user.isAvailable ? 'Yes' : 'No'}</p>
              </>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default UserProfile;

================
File: src/components/Vehicle/VehicleManagement.js
================
import React, { useState, useEffect, useCallback } from 'react';
import { motion } from 'framer-motion';
import { Car, Truck, Calendar, Hexagon, Cpu, Palette } from 'lucide-react';
import { useAuth } from '../context/AuthContext';

const BACKEND_URL = "http://localhost:3001";

const VehicleManagement = () => {
  const [vehicles, setVehicles] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { user } = useAuth();

  const fetchVehicles = useCallback(async () => {
    const driverId = localStorage.getItem('userId');
    const token = localStorage.getItem('token');

    if (!driverId || !token) {
      throw new Error('Authentication required');
    }

    try {
      const response = await fetch(`${BACKEND_URL}/api/v2/vehicles/driver/${driverId}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
      });

      if (!response.ok) {
        if (response.status === 401) {
          throw new Error('Session expired');
        }
        throw new Error('Failed to fetch vehicles');
      }

      const data = await response.json();
      if (data.success === false) {
        throw new Error(data.message || 'Failed to fetch vehicles');
      }

      setVehicles(data.vehicles);
      return true;
    } catch (error) {
      console.error('Error fetching vehicles:', error);
      throw error;
    }
  }, []);

  const initializeData = useCallback(async () => {
    setLoading(true);
    setError(null);

    try {
      await fetchVehicles();
    } catch (error) {
      console.error('Initialization error:', error);
      setError(error.message || 'Failed to load vehicles');
      return false;
    } finally {
      setLoading(false);
    }

    return true;
  }, [fetchVehicles]);

  useEffect(() => {
    if (user?.email && localStorage.getItem('token')) {
      initializeData();
    }
  }, [user?.email, initializeData]);

  const getVehicleIcon = (type) => {
    switch (type) {
      case 'sedan':
      case 'suv':
        return <Car className="w-8 h-8 text-blue-500" />;
      case 'van':
      case 'truck':
        return <Truck className="w-8 h-8 text-green-500" />;
      default:
        return <Car className="w-8 h-8 text-gray-500" />;
    }
  };

  if (!user?.email || !localStorage.getItem('token')) {
    return (
      <div className="flex justify-center items-center h-screen">
        <div className="text-red-500 text-xl">Please log in to view your vehicles</div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex flex-col justify-center items-center h-screen">
        <div className="text-red-500 text-xl mb-4">{error}</div>
        <button 
          onClick={initializeData}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          Retry
        </button>
      </div>
    );
  }

  return (
    <div className="p-6 bg-gray-100 min-h-screen">
      <h1 className="text-3xl font-bold mb-6 text-gray-800">My Vehicles</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {vehicles.map((vehicle) => (
          <motion.div
            key={vehicle._id}
            className="bg-white rounded-lg shadow-lg overflow-hidden"
            whileHover={{ scale: 1.03 }}
            transition={{ duration: 0.3 }}
          >
            <div className="p-6">
              <div className="flex justify-between items-center mb-4">
                {getVehicleIcon(vehicle.vehicleType)}
                <span className={`px-3 py-1 rounded-full text-sm font-semibold ${
                  vehicle.isAvailable ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                }`}>
                  {vehicle.isAvailable ? 'Available' : 'In Use'}
                </span>
              </div>
              <h2 className="text-2xl font-semibold text-gray-800 mb-2">
                {vehicle.make} {vehicle.model}
              </h2>
              <div className="space-y-2">
                <div className="flex items-center text-gray-600">
                  <Calendar className="w-5 h-5 mr-2" />
                  <span>{vehicle.year}</span>
                </div>
                <div className="flex items-center text-gray-600">
                  <Hexagon className="w-5 h-5 mr-2" />
                  <span>{vehicle.licensePlate}</span>
                </div>
                <div className="flex items-center text-gray-600">
                  <Cpu className="w-5 h-5 mr-2" />
                  <span className="capitalize">{vehicle.vehicleType}</span>
                </div>
                <div className="flex items-center text-gray-600">
                  <Palette className="w-5 h-5 mr-2" />
                  <span>{vehicle.color}</span>
                </div>
              </div>
            </div>
            <div className="px-6 py-4 bg-gray-50 border-t border-gray-200">
              <button className="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition duration-300">
                Manage Vehicle
              </button>
            </div>
          </motion.div>
        ))}
      </div>
      {vehicles.length === 0 && (
        <div className="text-center text-gray-500 mt-10">
          No vehicles found. Add a vehicle to get started.
        </div>
      )}
    </div>
  );
};

export default VehicleManagement;

================
File: src/components/Auth.js
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { User, Truck, Shield, ArrowRight, Mail, Lock, Phone, MapPin, CreditCard, Clock } from 'lucide-react';
import { useAuth } from './context/AuthContext';

const BACKEND_URL = "http://localhost:3001";


// Custom CSS animations
const styles = `
@keyframes slideUp {
  from { transform: translateY(20px); opacity: 0; }
  to { transform: translateY(0); opacity: 1; }
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes shake {
  0%, 100% { transform: translateX(0); }
  10%, 30%, 50%, 70%, 90% { transform: translateX(-2px); }
  20%, 40%, 60%, 80% { transform: translateX(2px); }
}

@keyframes pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.05); }
  100% { transform: scale(1); }
}

@keyframes shimmer {
  0% { background-position: -1000px 0; }
  100% { background-position: 1000px 0; }
}

.animate-slide-up {
  animation: slideUp 0.5s ease forwards;
}

.animate-fade-in {
  animation: fadeIn 0.5s ease forwards;
}

.animate-shake {
  animation: shake 0.5s ease forwards;
}

.animate-pulse {
  animation: pulse 2s infinite;
}

.shimmer {
  background: linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.1) 50%, rgba(255,255,255,0) 100%);
  background-size: 1000px 100%;
  animation: shimmer 2s infinite linear;
}

.card-hover {
  transition: all 0.3s ease;
}

.card-hover:hover {
  transform: translateY(-8px);
  box-shadow: 0 20px 40px rgba(0,0,0,0.2);
}

.input-focus {
  transition: all 0.3s ease;
}

.input-focus:focus {
  transform: scale(1.02);
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5);
}

.button-hover {
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.button-hover:before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
  transition: all 0.5s ease;
}

.button-hover:hover:before {
  left: 100%;
}
`;

const Auth = () => {
  const [isLogin, setIsLogin] = useState(true);
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: '',
    role: 'customer',
    licenseNumber: '',
    experienceYears: '',
    phoneNumber: '',
    address: '',
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [animateError, setAnimateError] = useState(false);
  const navigate = useNavigate();
  const { login } = useAuth();

  const testAccounts = [
    { role: 'Customer', email: 'rupaparadhaval1234@gmail.com', password: 'atlanbackend', icon: <User size={24} />, gradient: 'from-blue-500 to-blue-600' },
    { role: 'Driver', email: 'janesmith1@example.com', password: 'securepassword456', icon: <Truck size={24} />, gradient: 'from-green-500 to-green-600' },
    { role: 'Admin', email: 'admin@example.com', password: 'adminpass123', icon: <Shield size={24} />, gradient: 'from-slate-300 to-slate-500' },
  ];

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const storeUserData = (data) => {
    localStorage.clear();
    localStorage.setItem('token', data.token);
    localStorage.setItem('userId', data.user.id);
    localStorage.setItem('email', data.user.email);
    localStorage.setItem('role', data.user.role);
    localStorage.setItem('username', data.user.username);
  };

  const processAuthResponse = async (data) => {
    if (data.success && data.token && data.user) {
      storeUserData(data);
      await login(data.user);
      navigate('/', { replace: true });
    } else {
      throw new Error(data.message || 'Authentication failed');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      const url = `${BACKEND_URL}/api/v2/auth/${isLogin ? 'login' : 'signup'}`;
      const requestData = isLogin ? 
        { email: formData.email, password: formData.password } : 
        formData;

      const response = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestData)
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || 'Authentication failed');
      }

      await processAuthResponse(data);
    } catch (error) {
      console.error('Auth error:', error);
      setError(error.message || 'An error occurred during authentication');
      setAnimateError(true);
      setTimeout(() => setAnimateError(false), 500);
    } finally {
      setLoading(false);
    }
  };

  const handleTestLogin = async (email, password) => {
    setLoading(true);
    setError(null);
  
    try {
      const response = await fetch(`${BACKEND_URL}/api/v2/auth/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password })
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || 'Login failed');
      }

      await processAuthResponse(data);
    } catch (error) {
      console.error('Test login error:', error);
      setError(error.message || 'An error occurred during test login');
      setAnimateError(true);
      setTimeout(() => setAnimateError(false), 500);
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <style>{styles}</style>
      <div className="min-h-screen bg-gradient-to-br from-slate-900 to-slate-800 flex items-center justify-center p-4">
        <div className="max-w-6xl w-full space-y-8 animate-slide-up">
          {/* Header */}
          <div className="text-center space-y-4">
            <h1 className="text-4xl font-bold text-white">LogistiQ</h1>
            <p className="text-slate-300 animate-fade-in">Choose your account type to get started</p>
          </div>

          {error && (
            <div className={`max-w-md mx-auto bg-red-500/10 border border-red-500/20 text-red-300 px-4 py-3 rounded-lg ${animateError ? 'animate-shake' : ''}`}>
              {error}
            </div>
          )}

          {/* Test Account Cards */}
          <div className="grid md:grid-cols-3 gap-6">
            {testAccounts.map((account, index) => (
              <div 
                key={account.role}
                className={`card-hover rounded-lg overflow-hidden bg-gradient-to-br ${account.gradient}`}
                style={{ animationDelay: `${index * 0.1}s` }}
              >
                <div className="p-6 space-y-6">
                  <div className="text-center space-y-4">
                    <div className="mx-auto bg-white/10 p-3 rounded-xl w-fit animate-pulse">
                      {account.icon}
                    </div>
                    <h3 className="text-2xl font-bold text-white">{account.role}</h3>
                  </div>

                  <div className="space-y-2">
                    <div className="flex items-center space-x-2 bg-white/10 px-3 py-2 rounded-lg">
                      <Mail size={16} className="text-white/60" />
                      <input 
                        type="email"
                        defaultValue={account.email}
                        className="bg-transparent text-white w-full outline-none placeholder-white/60 input-focus"
                        readOnly
                      />
                    </div>
                    <div className="flex items-center space-x-2 bg-white/10 px-3 py-2 rounded-lg">
                      <Lock size={16} className="text-white/60" />
                      <input 
                        type="password"
                        defaultValue={account.password}
                        className="bg-transparent text-white w-full outline-none placeholder-white/60 input-focus"
                        readOnly
                      />
                    </div>
                  </div>

                  <button 
                    onClick={() => handleTestLogin(account.email, account.password)}
                    className="w-full bg-white text-gray-800 py-2 rounded-lg font-medium button-hover flex items-center justify-center space-x-2"
                    disabled={loading}
                  >
                    <span>{loading ? 'Logging in...' : `Login as ${account.role}`}</span>
                    {!loading && <ArrowRight size={16} />}
                  </button>
                </div>
              </div>
            ))}
          </div>

          {/* Custom Login Form */}
          <div className="mt-12 max-w-md mx-auto">
            <div className="bg-white/5 border border-white/10 rounded-lg overflow-hidden card-hover">
              <div className="p-6 space-y-6">
                <h3 className="text-xl font-bold text-white text-center">
                  {isLogin ? 'Custom Login' : 'Create Account'}
                </h3>

                <form onSubmit={handleSubmit} className="space-y-4">
                  {!isLogin && (
                    <div className="flex items-center space-x-2 bg-white/10 px-3 py-2 rounded-lg">
                      <User size={16} className="text-white/60" />
                      <input 
                        type="text"
                        name="username"
                        placeholder="Username"
                        value={formData.username}
                        onChange={handleChange}
                        className="bg-transparent text-white w-full outline-none placeholder-white/60 input-focus"
                        required
                      />
                    </div>
                  )}
                  
                  <div className="flex items-center space-x-2 bg-white/10 px-3 py-2 rounded-lg">
                    <Mail size={16} className="text-white/60" />
                    <input 
                      type="email"
                      name="email"
                      placeholder="Email"
                      value={formData.email}
                      onChange={handleChange}
                      className="bg-transparent text-white w-full outline-none placeholder-white/60 input-focus"
                      required
                    />
                  </div>

                  <div className="flex items-center space-x-2 bg-white/10 px-3 py-2 rounded-lg">
                    <Lock size={16} className="text-white/60" />
                    <input 
                      type="password"
                      name="password"
                      placeholder="Password"
                      value={formData.password}
                      onChange={handleChange}
                      className="bg-transparent text-white w-full outline-none placeholder-white/60 input-focus"
                      required
                    />
                  </div>

                  {!isLogin && (
                    <>
                      <select
                        name="role"
                        value={formData.role}
                        onChange={handleChange}
                        className="w-full bg-white/10 text-white px-3 py-2 rounded-lg outline-none input-focus"
                      >
                        <option value="customer" className="text-gray-900">Customer</option>
                        <option value="driver" className="text-gray-900">Driver</option>
                        <option value="admin" className="text-gray-900">Admin</option>
                      </select>

                      <div className="flex items-center space-x-2 bg-white/10 px-3 py-2 rounded-lg">
                        <Phone size={16} className="text-white/60" />
                        <input 
                          type="tel"
                          name="phoneNumber"
                          placeholder="Phone Number"
                          value={formData.phoneNumber}
                          onChange={handleChange}
                          className="bg-transparent text-white w-full outline-none placeholder-white/60 input-focus"
                        />
                      </div>

                      <div className="flex items-center space-x-2 bg-white/10 px-3 py-2 rounded-lg">
                        <MapPin size={16} className="text-white/60" />
                        <input 
                          type="text"
                          name="address"
                          placeholder="Address"
                          value={formData.address}
                          onChange={handleChange}
                          className="bg-transparent text-white w-full outline-none placeholder-white/60 input-focus"
                        />
                      </div>

                      {formData.role === 'driver' && (
                        <>
                          <div className="flex items-center space-x-2 bg-white/10 px-3 py-2 rounded-lg">
                            <CreditCard size={16} className="text-white/60" />
                            <input 
                              type="text"
                              name="licenseNumber"
                              placeholder="License Number"
                              value={formData.licenseNumber}
                              onChange={handleChange}
                              className="bg-transparent text-white w-full outline-none placeholder-white/60 input-focus"
                              required
                            />
                          </div>

                          <div className="flex items-center space-x-2 bg-white/10 px-3 py-2 rounded-lg">
                            <Clock size={16} className="text-white/60" />
                            <input 
                              type="number"
                              name="experienceYears"
                              placeholder="Years of Experience"
                              value={formData.experienceYears}
                              onChange={handleChange}
                              className="bg-transparent text-white w-full outline-none placeholder-white/60 input-focus"
                              required
                            />
                          </div>
                        </>
                      )}
                    </>
                  )}

                  <button 
                    type="submit"
                    className="w-full bg-blue-500 text-white py-2 rounded-lg font-medium button-hover group flex items-center justify-center space-x-2 relative overflow-hidden"
                    disabled={loading}
                  >
                    <div className="relative z-10 flex items-center justify-center space-x-2">
                      <span>{loading ? 'Processing...' : (isLogin ? 'Login' : 'Sign Up')}</span>
                      {!loading && <ArrowRight size={16} className="group-hover:translate-x-1 transition-transform" />}
                    </div>
                    <div className="absolute inset-0 shimmer opacity-0 group-hover:opacity-100"></div>
                  </button>
                </form>

                <div className="relative">
                  <div className="absolute inset-0 flex items-center">
                    <div className="w-full border-t border-white/10"></div>
                  </div>
                  <div className="relative flex justify-center text-sm">
                    <span className="px-2 bg-slate-900/50 text-slate-400">or</span>
                  </div>
                </div>

                <p className="text-center text-slate-400">
                  {isLogin ? "Don't have an account? " : "Already have an account? "}
                  <button 
                    onClick={() => setIsLogin(!isLogin)} 
                    className="text-blue-400 hover:text-blue-300 font-medium transition-colors relative group"
                  >
                    {isLogin ? 'Sign Up' : 'Login'}
                    <span className="absolute -bottom-0.5 left-0 w-full h-0.5 bg-blue-400 origin-left transform scale-x-0 transition-transform group-hover:scale-x-100"></span>
                  </button>
                </p>
              </div>
            </div>
          </div>

          {/* Footer with animated gradient border */}
          <div className="text-center text-slate-400 relative">
            <div className="absolute inset-0 bg-gradient-to-r from-transparent via-blue-500/20 to-transparent animate-shimmer"></div>
            <p className="relative">
              Secure login powered by LogistiQ
            </p>
          </div>
        </div>
      </div>
    </>
  );
};

export default Auth;

================
File: src/components/card.js
================
// src/components/ui/card.js

import React from 'react';

const Card = ({ children, className }) => {
  return (
    <div className={`bg-white shadow-md rounded-lg p-4 ${className}`}>
      {children}
    </div>
  );
};

export default Card;

================
File: src/components/cardContent.js
================
// src/components/ui/cardContent.js


export const CardContent = ({ children }) => {
  return <div className="p-4">{children}</div>;
};

// src/components/ui/cardHeader.js


export const CardHeader = ({ children }) => {
  return <div className="border-b pb-2">{children}</div>;
};

// src/components/ui/cardTitle.js


export const CardTitle = ({ children }) => {
  return <h2 className="text-lg font-semibold">{children}</h2>;
};

// src/components/ui/cardDescription.js


export const CardDescription = ({ children }) => {
  return <p className="text-sm text-gray-600">{children}</p>;
};

// src/components/ui/cardFooter.js


export const CardFooter = ({ children }) => {
  return <div className="border-t pt-2">{children}</div>;
};

================
File: src/components/ErrorPage.js
================
import React from 'react';
import { useLocation, Link } from 'react-router-dom';

const ErrorPage = () => {
  const location = useLocation();
  const message = location.state?.message || "An error occurred";

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100">
      <h1 className="text-4xl font-bold mb-4">Oops!</h1>
      <p className="text-xl mb-8">{message}</p>
      <Link to="/" className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
        Go Home
      </Link>
    </div>
  );
};

export default ErrorPage;

================
File: src/components/Navbar.js
================
import React, { useState, useCallback, memo } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from './context/AuthContext';
import { Menu, X, ChevronDown, Home, Calendar, User, MapPin, LogOut, Search, Settings } from 'lucide-react';
import { useSearch } from './context/SearchContext';

const NavLink = memo(({ to, children, onClick, icon: Icon }) => {
  const location = useLocation();
  const isActive = location.pathname === to;

  return (
    <Link
      to={to}
      className={`relative group flex items-center space-x-2 px-4 py-2 rounded-full transition-all duration-300 ${
        isActive 
          ? 'bg-blue-600/20 text-white' 
          : 'text-slate-300 hover:bg-white/5'
      }`}
      onClick={onClick}
    >
      {Icon && (
        <Icon 
          className={`w-4 h-4 transition-colors duration-300 ${
            isActive ? 'text-blue-400' : 'text-slate-400'
          } group-hover:text-blue-400`} 
        />
      )}
      <span className="font-medium">{children}</span>
      
      {/* Active indicator line */}
      <div className={`absolute bottom-0 left-1/2 -translate-x-1/2 h-0.5 bg-blue-500 transition-all duration-300 ${
        isActive ? 'w-4/5' : 'w-0 group-hover:w-1/2'
      }`} />
    </Link>
  );
});

NavLink.displayName = 'NavLink';

const Navbar = () => {
  const { user, logout } = useAuth();
  const navigate = useNavigate();
  const location = useLocation(); // Add this line
  const { setSearchQuery } = useSearch();

  const [searchInput, setSearchInput] = useState('');
  const [isOpen, setIsOpen] = useState(false);
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [isSearchFocused, setIsSearchFocused] = useState(false);

  const handleSearch = useCallback((e) => {
    const query = e.target.value;
    setSearchInput(query);
    setSearchQuery(query.toLowerCase());
    if (location.pathname !== '/rides') {
      navigate('/rides');
    }
  }, [setSearchQuery, navigate, location.pathname]); // Add location.pathname to dependencies


  const handleLogout = useCallback(async () => {
    try {
      await logout();
      window.location.reload();
      window.location.href = '/login';
    } catch (error) {
      console.error('Logout failed:', error);
    }
  }, [logout]);

  const toggleMenu = useCallback(() => {
    setIsOpen(prev => !prev);
  }, []);

  const toggleDropdown = useCallback(() => {
    setDropdownOpen(prev => !prev);
  }, []);

  const closeMenus = useCallback(() => {
    setIsOpen(false);
    setDropdownOpen(false);
  }, []);

  // Verify user and token exist before rendering
  const token = localStorage.getItem('token');
  if (!user || !token) return null;

  return (
    <nav className="relative h-20 bg-gradient-to-r from-slate-900 to-slate-800 shadow-lg mt-10">
      {/* Frosted glass effect overlay */}
      <div className="absolute inset-0 bg-white/[0.02] backdrop-blur-sm" />

      <div className="relative h-full max-w-7xl mx-auto px-4 flex items-center justify-between">
        {/* Logo Section */}
        <Link to="/" className="flex items-center space-x-2 group">
          <div className="relative">
            <div className="w-10 h-10 bg-blue-600 rounded-lg transform transition-all duration-300 group-hover:rotate-12 group-hover:scale-110">
              <div className="absolute inset-0 bg-blue-500 rounded-lg transform rotate-3 group-hover:rotate-6 transition-transform" />
              <span className="absolute inset-0 flex items-center justify-center text-white font-bold">L</span>
            </div>
          </div>
          <div className="flex flex-col">
            <span className="text-white font-bold text-xl tracking-tight">LogistiQ</span>
            <span className="text-slate-400 text-xs font-medium">ENTERPRISE</span>
          </div>
        </Link>

        {/* Desktop Navigation */}
        <div className="hidden md:flex items-center space-x-1">
          <NavLink to="/" icon={Home} onClick={closeMenus}>Home</NavLink>
          
          {user.role === 'customer' && (
            <>
              <NavLink to="/book" icon={Calendar} onClick={closeMenus}>Book a Ride</NavLink>
              <NavLink to="/rides" icon={MapPin} onClick={closeMenus}>My Rides</NavLink>
            </>
          )}
          
          {user.role === 'driver' && (
            <div className="relative">
              <button
                onClick={toggleDropdown}
                className="flex items-center space-x-2 px-4 py-2 rounded-full text-slate-300 hover:bg-white/5 transition-all duration-300"
              >
                <Settings className="w-4 h-4" />
                <span>Driver</span>
                <ChevronDown className={`w-4 h-4 transition-transform duration-300 ${dropdownOpen ? 'rotate-180' : ''}`} />
              </button>
              
              {dropdownOpen && (
                <div className="absolute top-full mt-2 w-48 bg-slate-800 rounded-lg shadow-lg overflow-hidden z-50">
                  <NavLink to="/driver/dashboard" icon={Home} onClick={closeMenus}>Dashboard</NavLink>
                  <NavLink to="/driver/update-location" icon={MapPin} onClick={closeMenus}>Update Location</NavLink>
                  <NavLink to="/driver/vehicles" icon={Calendar} onClick={closeMenus}>Vehicle Management</NavLink>
                </div>
              )}
            </div>
          )}
          
          {user.role === 'admin' && (
            <NavLink to="/admin" icon={Settings} onClick={closeMenus}>Admin Dashboard</NavLink>
          )}
          
          <NavLink to="/profile" icon={User} onClick={closeMenus}>Profile</NavLink>
          <NavLink to="/tracking" icon={MapPin} onClick={closeMenus}>
            Track Ride &nbsp;
            {/* <div className="absolute top-1/2 -translate-y-1/2 right-2">
              <div className="relative w-2 h-2">
                <div className="absolute inset-0 bg-green-500 rounded-full animate-ping" />
                <div className="relative w-2 h-2 bg-green-500 rounded-full" />
              </div>
            </div> */}
          </NavLink>
        </div>

        {/* Right Section: Search & Logout */}
        <div className="hidden md:flex items-center space-x-4">
        <div className={`relative transition-all duration-300 ${
    isSearchFocused ? 'w-64' : 'w-48'
  }`}>
    <input
      type="text"
      value={searchInput}
      onChange={handleSearch}
      placeholder="Search by origin or destination..."
      onFocus={() => setIsSearchFocused(true)}
      onBlur={() => setIsSearchFocused(false)}
      className="w-full bg-white/5 rounded-full py-2 pl-10 pr-4 text-slate-300 placeholder-slate-500 focus:outline-none focus:ring-2 focus:ring-blue-500/50 transition-all duration-300"
    />
    <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400" />
    {searchInput && (
      <button
        onClick={() => {
          setSearchInput('');
          setSearchQuery('');
        }}
        className="absolute right-3 top-1/2 -translate-y-1/2 text-slate-400 hover:text-slate-300"
      >
        <X className="w-4 h-4" />
      </button>
    )}
  </div>

          <button
            onClick={handleLogout}
            className="relative group p-2 rounded-full bg-red-500/10 hover:bg-red-500/20 transition-all duration-300"
          >
            <LogOut className="w-5 h-5 text-red-500 transition-all duration-300 group-hover:rotate-12" />
            <div className="absolute inset-0 bg-red-500/10 rounded-full transform scale-0 group-hover:scale-100 transition-transform duration-300" />
          </button>
        </div>

        {/* Mobile Menu Button */}
        <div className="md:hidden">
          <button
            onClick={toggleMenu}
            className="relative p-2 rounded-lg bg-white/5 hover:bg-white/10 transition-colors duration-300"
          >
            {isOpen ? (
              <X className="w-6 h-6 text-white" />
            ) : (
              <Menu className="w-6 h-6 text-white" />
            )}
          </button>
        </div>
      </div>

      {/* Mobile Menu */}
      {isOpen && (
        <div className="absolute top-full left-0 right-0 bg-slate-900/95 backdrop-blur-sm md:hidden z-50">
          <div className="px-4 pt-2 pb-3 space-y-1">
            <NavLink to="/" icon={Home} onClick={closeMenus}>Home</NavLink>
            
            {user.role === 'customer' && (
              <>
                <NavLink to="/book" icon={Calendar} onClick={closeMenus}>Book a Ride</NavLink>
                <NavLink to="/rides" icon={MapPin} onClick={closeMenus}>My Rides</NavLink>
              </>
            )}
            
            {user.role === 'driver' && (
              <>
                <NavLink to="/driver/dashboard" icon={Home} onClick={closeMenus}>Driver Dashboard</NavLink>
                <NavLink to="/driver/update-location" icon={MapPin} onClick={closeMenus}>Update Location</NavLink>
                <NavLink to="/driver/vehicles" icon={Calendar} onClick={closeMenus}>Vehicle Management</NavLink>
              </>
            )}
            
            {user.role === 'admin' && (
              <NavLink to="/admin" icon={Settings} onClick={closeMenus}>Admin Dashboard</NavLink>
            )}
            
            <NavLink to="/profile" icon={User} onClick={closeMenus}>Profile</NavLink>
            <NavLink to="/tracking" icon={MapPin} onClick={closeMenus}>Track Ride</NavLink>
          </div>
          
          <div className="px-4 py-3 border-t border-slate-700">
            <button
              onClick={handleLogout}
              className="w-full bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-full transition-all duration-300 flex items-center justify-center space-x-2"
            >
              <LogOut className="w-5 h-5" />
              <span>Logout</span>
            </button>
          </div>
        </div>
      )}
    </nav>

  );
};

Navbar.displayName = 'Navbar';

export default memo(Navbar);

================
File: src/config/api.js
================
// export const API_BASE_URL = 'api/v2';

================
File: src/Pages/Home.js
================
import React, { useRef, useEffect, useState } from 'react';
import { motion, useScroll, useTransform, useAnimation, useInView } from 'framer-motion';
import { 
  Truck, Clock, Star, Shield, MapPin, Users, ChevronRight, 
  Phone, Mail, Facebook, Twitter, Instagram, ArrowRight,
  CheckCircle, Award, LifeBuoy, Sparkles, Heart, ZoomIn,
  Menu, X, ChevronDown, Zap, ArrowUp, MessageSquare, Smartphone
} from 'lucide-react';
import { useNavigate } from 'react-router-dom';

const Home = () => {
  const navigate = useNavigate();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [activeSection, setActiveSection] = useState('home');
  
  // Refs for sections to track for menu highlighting
  const homeRef = useRef(null);
  const featuresRef = useRef(null);
  const howItWorksRef = useRef(null);
  const pricingRef = useRef(null);
  const testimonialsRef = useRef(null);
  const contactRef = useRef(null);
  
  const testimonialContainerRef = useRef(null);
  const scrollRef = useRef(null);
  
  // Animation controls
  const controls = useAnimation();
  
  // Track section visibility for menu highlighting
  useEffect(() => {
    const handleScroll = () => {
      const scrollPosition = window.scrollY + 100;
      
      const sections = [
        { id: 'home', ref: homeRef },
        { id: 'features', ref: featuresRef },
        { id: 'howItWorks', ref: howItWorksRef },
        { id: 'pricing', ref: pricingRef },
        { id: 'testimonials', ref: testimonialsRef },
        { id: 'contact', ref: contactRef }
      ];
      
      for (const section of sections) {
        if (section.ref.current) {
          const { offsetTop, offsetHeight } = section.ref.current;
          if (scrollPosition >= offsetTop && scrollPosition < offsetTop + offsetHeight) {
            setActiveSection(section.id);
            break;
          }
        }
      }
    };
    
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);
  
  // Features section
  const features = [
    { 
      icon: <Truck className="w-8 h-8" />, 
      title: 'Efficient Logistics', 
      description: 'Optimized routes and real-time tracking for faster deliveries',
      color: 'bg-blue-50'
    },
    { 
      icon: <Clock className="w-8 h-8" />, 
      title: 'On-Time Performance', 
      description: 'Punctual pickups and deliveries, every time',
      color: 'bg-green-50'
    },
    { 
      icon: <Star className="w-8 h-8" />, 
      title: 'Quality Service', 
      description: 'Highly rated drivers and excellent customer support',
      color: 'bg-yellow-50'
    },
    { 
      icon: <Shield className="w-8 h-8" />, 
      title: 'Secure Shipments', 
      description: 'Advanced security measures to protect your cargo',
      color: 'bg-purple-50'
    },
    { 
      icon: <MapPin className="w-8 h-8" />, 
      title: 'Wide Coverage', 
      description: 'Extensive network covering major cities and routes',
      color: 'bg-red-50'
    },
    { 
      icon: <Users className="w-8 h-8" />, 
      title: 'Community Driven', 
      description: 'A platform that values both drivers and passengers',
      color: 'bg-indigo-50'
    },
    { 
      icon: <Sparkles className="w-8 h-8" />, 
      title: 'Rewards Program', 
      description: 'Earn points and get discounts on future rides',
      color: 'bg-pink-50'
    },
    { 
      icon: <LifeBuoy className="w-8 h-8" />, 
      title: '24/7 Support', 
      description: 'Our team is always available to help you',
      color: 'bg-teal-50'
    },
  ];

  // Enhanced testimonials
  const testimonials = [
    { 
      name: 'John D.', 
      role: 'Regular Commuter', 
      content: 'This ride-sharing app has transformed my daily commute. It\'s reliable, affordable, and the drivers are always professional.', 
      rating: 5,
      image: '/api/placeholder/80/80',
      bgColor: 'bg-blue-50'
    },
    { 
      name: 'Sarah M.', 
      role: 'Business Traveler', 
      content: 'As someone who travels for work frequently, this app has been a game-changer. The wide coverage and consistent service quality are impressive.', 
      rating: 4,
      image: '/api/placeholder/80/80',
      bgColor: 'bg-green-50'
    },
    { 
      name: 'Alex T.', 
      role: 'Student', 
      content: 'The student discounts and shared ride options make this my go-to choice for getting around campus and the city. I\'ve saved so much money!', 
      rating: 5,
      image: '/api/placeholder/80/80',
      bgColor: 'bg-purple-50'
    },
    { 
      name: 'Emily R.', 
      role: 'Part-time Driver', 
      content: 'I love the flexibility this platform offers. It\'s a great way to earn extra income on my own schedule, and the app is so easy to use.', 
      rating: 5,
      image: '/api/placeholder/80/80',
      bgColor: 'bg-yellow-50'
    },
    { 
      name: 'Michael P.', 
      role: 'City Explorer', 
      content: 'I\'ve used this service in multiple cities and it\'s consistently excellent. The drivers know their routes well and have great local knowledge.', 
      rating: 5,
      image: '/api/placeholder/80/80',
      bgColor: 'bg-pink-50'
    },
    { 
      name: 'Rajesh K.', 
      role: 'Tech Professional', 
      content: 'The app interface is intuitive and clean. I especially love the predictive destination feature that remembers my common routes.', 
      rating: 5,
      image: '/api/placeholder/80/80',
      bgColor: 'bg-indigo-50'
    },
    { 
      name: 'Sophia L.', 
      role: 'Night Shift Nurse', 
      content: 'Being able to pre-book rides for my late-night shifts has been a lifesaver. Always on time and makes me feel safe commuting at odd hours.', 
      rating: 5,
      image: '/api/placeholder/80/80',
      bgColor: 'bg-teal-50'
    },
  ];

  const stats = [
    { value: '5M+', label: 'Active Users', icon: <Users className="w-6 h-6" /> },
    { value: '100+', label: 'Cities Covered', icon: <MapPin className="w-6 h-6" /> },
    { value: '1M+', label: 'Rides Completed', icon: <Truck className="w-6 h-6" /> },
    { value: '4.8', label: 'Average Rating', icon: <Star className="w-6 h-6" /> },
  ];
  
  // New pricing plans
  const pricingPlans = [
    {
      name: 'Basic',
      price: '$9.99',
      period: 'per month',
      description: 'Perfect for occasional riders',
      features: [
        'Standard ride options',
        'Peak hour availability',
        'Email support',
        'Basic rider insurance',
      ],
      cta: 'Get Started',
      highlighted: false,
      color: 'bg-white'
    },
    {
      name: 'Premium',
      price: '$19.99',
      period: 'per month',
      description: 'Ideal for regular commuters',
      features: [
        'All Basic features',
        'Priority matching',
        'No surge pricing',
        '24/7 phone support',
        'Enhanced rider insurance',
        '10% off on weekly passes'
      ],
      cta: 'Get Premium',
      highlighted: true,
      color: 'bg-blue-50'
    },
    {
      name: 'Business',
      price: '$49.99',
      period: 'per month',
      description: 'Best for companies and teams',
      features: [
        'All Premium features',
        'Multiple user accounts',
        'Centralized billing',
        'Expense reporting',
        'Dedicated account manager',
        'Custom travel policies'
      ],
      cta: 'Contact Sales',
      highlighted: false,
      color: 'bg-white'
    },
  ];
  
  // Auto-scroll animation for testimonials
  useEffect(() => {
    const container = testimonialContainerRef.current;
    if (!container) return;
    
    let scrollAmount = 0;
    let scrollDirection = 1;
    let isPaused = false;
    
    container.addEventListener('mouseenter', () => {
      isPaused = true;
    });
    
    container.addEventListener('mouseleave', () => {
      isPaused = false;
    });
    
    const handleAutoScroll = () => {
      if (container && !isPaused) {
        scrollAmount += 0.5 * scrollDirection;
        
        if (scrollAmount > (container.scrollWidth - container.clientWidth)) {
          // Reached the end, change direction
          scrollDirection = -1;
        } else if (scrollAmount < 0) {
          // Reached the beginning, change direction
          scrollDirection = 1;
        }
        
        container.scrollLeft = scrollAmount;
      }
    };
    
    const interval = setInterval(handleAutoScroll, 30);
    return () => clearInterval(interval);
  }, []);
  
  // Animation for scroll indicator
  const { scrollYProgress } = useScroll();
  const scrollOpacity = useTransform(scrollYProgress, [0, 0.1], [1, 0]);
  
  return (
    <div className="bg-white overflow-x-hidden">
      {/* Fixed Navigation */}
      <header className="fixed top-0 left-0 w-full bg-white shadow-md z-50">
        <div className="max-w-7xl mx-auto px-4">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center">
              <a href="#" className="text-blue-600 font-bold text-xl flex items-center">
                <Truck className="w-6 h-6 mr-2" />
                <span>LogistiQ</span>
              </a>
            </div>
            
            {/* Desktop Navigation */}
            <nav className="hidden md:flex space-x-8">
              <a href="#home" 
                 className={`text-sm font-medium transition-colors hover:text-blue-600 ${activeSection === 'home' ? 'text-blue-600' : 'text-gray-700'}`}>
                Home
              </a>
              <a href="#features" 
                 className={`text-sm font-medium transition-colors hover:text-blue-600 ${activeSection === 'features' ? 'text-blue-600' : 'text-gray-700'}`}>
                Features
              </a>
              <a href="#howItWorks" 
                 className={`text-sm font-medium transition-colors hover:text-blue-600 ${activeSection === 'howItWorks' ? 'text-blue-600' : 'text-gray-700'}`}>
                How It Works
              </a>
              <a href="#pricing" 
                 className={`text-sm font-medium transition-colors hover:text-blue-600 ${activeSection === 'pricing' ? 'text-blue-600' : 'text-gray-700'}`}>
                Pricing
              </a>
              <a href="#testimonials" 
                 className={`text-sm font-medium transition-colors hover:text-blue-600 ${activeSection === 'testimonials' ? 'text-blue-600' : 'text-gray-700'}`}>
                Testimonials
              </a>
            </nav>
            
            <div className="hidden md:flex items-center space-x-4">
              <button onClick={() => navigate('/login')} className="px-4 py-2 text-sm font-medium text-blue-600 hover:text-blue-800 transition-colors">
                Login
              </button>
              <button onClick={() => navigate('/signup')} className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 transition-colors">
                Sign Up
              </button>
            </div>
            
            {/* Mobile Menu Button */}
            <div className="md:hidden">
              <button onClick={() => setIsMenuOpen(!isMenuOpen)} className="text-gray-700">
                {isMenuOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
              </button>
            </div>
          </div>
        </div>
        
        {/* Mobile Menu */}
        {isMenuOpen && (
          <motion.div 
            className="md:hidden bg-white py-4 px-4 shadow-lg"
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
          >
            <nav className="flex flex-col space-y-4">
              <a href="#home" 
                 className={`text-sm font-medium transition-colors hover:text-blue-600 ${activeSection === 'home' ? 'text-blue-600' : 'text-gray-700'}`}
                 onClick={() => setIsMenuOpen(false)}>
                Home
              </a>
              <a href="#features" 
                 className={`text-sm font-medium transition-colors hover:text-blue-600 ${activeSection === 'features' ? 'text-blue-600' : 'text-gray-700'}`}
                 onClick={() => setIsMenuOpen(false)}>
                Features
              </a>
              <a href="#howItWorks" 
                 className={`text-sm font-medium transition-colors hover:text-blue-600 ${activeSection === 'howItWorks' ? 'text-blue-600' : 'text-gray-700'}`}
                 onClick={() => setIsMenuOpen(false)}>
                How It Works
              </a>
              <a href="#pricing" 
                 className={`text-sm font-medium transition-colors hover:text-blue-600 ${activeSection === 'pricing' ? 'text-blue-600' : 'text-gray-700'}`}
                 onClick={() => setIsMenuOpen(false)}>
                Pricing
              </a>
              <a href="#testimonials" 
                 className={`text-sm font-medium transition-colors hover:text-blue-600 ${activeSection === 'testimonials' ? 'text-blue-600' : 'text-gray-700'}`}
                 onClick={() => setIsMenuOpen(false)}>
                Testimonials
              </a>
              <div className="pt-4 flex flex-col space-y-2">
                <button onClick={() => navigate('/login')} className="w-full px-4 py-2 text-sm font-medium text-blue-600 border border-blue-600 rounded-md hover:bg-blue-50 transition-colors">
                  Login
                </button>
                <button onClick={() => navigate('/signup')} className="w-full px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 transition-colors">
                  Sign Up
                </button>
              </div>
            </nav>
          </motion.div>
        )}
      </header>

      {/* Hero Section */}
      <section id="home" ref={homeRef} className="pt-24 md:pt-32 pb-20 relative bg-gradient-to-b from-blue-50 to-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-12 items-center">
            <motion.div
              initial={{ opacity: 0, x: -50 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.8, ease: "easeOut" }}
            >
              <h1 className="text-4xl sm:text-5xl md:text-6xl font-bold text-gray-900 leading-tight">
                Ride Booking and <span className="text-blue-600">Sharing Reinvented</span>
              </h1>
              <p className="mt-6 text-xl text-gray-600 leading-relaxed">
                Experience seamless transportation with our cutting-edge ride-sharing platform. Save time, money, and the environment with LogistiQ.
              </p>
              <div className="mt-8 flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4">
                <motion.button 
                  className="px-8 py-4 bg-blue-600 text-white font-medium rounded-lg shadow-lg hover:bg-blue-700 transition-colors"
                  whileHover={{ scale: 1.03 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => navigate('/signup')}
                >
                  Get Started Free
                </motion.button>
                <motion.button 
                  className="px-8 py-4 bg-white text-blue-600 font-medium rounded-lg shadow-lg border border-blue-200 hover:bg-blue-50 transition-colors flex items-center justify-center"
                  whileHover={{ scale: 1.03 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <span>Watch Demo</span>
                  <ArrowRight className="ml-2 w-4 h-4" />
                </motion.button>
              </div>
              <div className="mt-8 flex items-center space-x-2 text-gray-500">
                <CheckCircle className="w-5 h-5 text-green-500" />
                <span>No credit card required</span>
                <div className="mx-2 h-1 w-1 rounded-full bg-gray-300"></div>
                <CheckCircle className="w-5 h-5 text-green-500" />
                <span>Free for 30 days</span>
              </div>
            </motion.div>
            <motion.div
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.8, ease: "easeOut", delay: 0.2 }}
              className="relative"
            >
              <div className="bg-white p-2 rounded-2xl shadow-2xl overflow-hidden">
                <img 
                  src="/api/placeholder/600/400" 
                  alt="Ride sharing app interface" 
                  className="w-full h-auto rounded-xl"
                />
                <div className="absolute top-4 right-4 bg-blue-600 text-white text-xs font-bold py-1 px-2 rounded-full">
                  NEW
                </div>
              </div>
              <div className="absolute -bottom-6 -left-6 bg-yellow-400 rounded-lg shadow-lg p-4 max-w-xs">
                <div className="flex items-start space-x-3">
                  <div className="flex-shrink-0">
                    <CheckCircle className="w-6 h-6 text-yellow-700" />
                  </div>
                  <p className="text-sm text-yellow-800 font-medium">
                    95% of our users report saving over 30% on their daily commute costs
                  </p>
                </div>
              </div>
            </motion.div>
          </div>
          <motion.div
            style={{ opacity: scrollOpacity }}
            className="absolute bottom-8 left-1/2 transform -translate-x-1/2"
          >
            <motion.div
              animate={{ y: [0, 10, 0] }}
              transition={{ repeat: Infinity, duration: 1.5 }}
            >
              <ChevronDown className="w-10 h-10 text-blue-500" />
            </motion.div>
          </motion.div>
        </div>
      </section>

      {/* Stats Section with Animated Counters */}
      <section className="py-16 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
            {stats.map((stat, index) => (
              <motion.div 
                key={index}
                className="text-center p-6 rounded-xl bg-blue-50 hover:bg-blue-100 transition-colors"
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true, margin: "-50px" }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
              >
                <div className="flex justify-center mb-4">
                  <div className="p-3 bg-blue-100 rounded-full text-blue-600">
                    {stat.icon}
                  </div>
                </div>
                <div className="text-3xl font-bold text-blue-600 mb-1">{stat.value}</div>
                <div className="text-gray-600 font-medium">{stat.label}</div>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* Features Section with Card Hover Effects */}
      <section id="features" ref={featuresRef} className="py-20 px-4 md:px-8 bg-white">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5 }}
              className="inline-block px-3 py-1 rounded-full bg-blue-100 text-blue-600 font-medium text-sm mb-4"
            >
              Features
            </motion.div>
            <motion.h2 
              className="text-3xl md:text-4xl font-bold text-gray-900 mb-4"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.1 }}
            >
              Everything You Need in One Place
            </motion.h2>
            <motion.p 
              className="text-xl text-gray-600 max-w-3xl mx-auto"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.2 }}
            >
              Our platform is designed to provide a seamless experience with features 
              that prioritize efficiency, safety, and customer satisfaction.
            </motion.p>
          </div>
          
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8">
            {features.map((feature, index) => (
              <motion.div
                key={index}
                className={`${feature.color} p-6 rounded-xl hover:shadow-xl transition-all group`}
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true, margin: "-50px" }}
                transition={{ duration: 0.5, delay: index * 0.05 }}
                whileHover={{ y: -8 }}
              >
                <div className="text-blue-600 mb-5 transition-transform group-hover:scale-110">
                  {feature.icon}
                </div>
                <h3 className="text-xl font-semibold mb-3 text-gray-900">{feature.title}</h3>
                <p className="text-gray-600">{feature.description}</p>
                <div className="mt-4 pt-4 border-t border-gray-200">
                  <a href="#" className="text-blue-600 font-medium flex items-center group-hover:underline">
                    Learn more
                    <ArrowRight className="ml-2 w-4 h-4 transition-transform group-hover:translate-x-1" />
                  </a>
                </div>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* App Features Showcase Section */}
      <section className="py-20 px-4 relative overflow-hidden bg-gradient-to-b from-white to-blue-50">
        <div className="max-w-7xl mx-auto">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-12 items-center">
            <motion.div
              initial={{ opacity: 0, x: -30 }}
              whileInView={{ opacity: 1, x: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.6 }}
            >
              <div className="inline-block px-3 py-1 rounded-full bg-blue-100 text-blue-600 font-medium text-sm mb-4">
                App Features
              </div>
              <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-6">
                Smart Technology for a Smart Ride Experience
              </h2>
              <p className="text-gray-600 mb-8">
                Our app is designed with the latest technology to provide you with a seamless and enjoyable ride experience.
              </p>
              
              <div className="space-y-6">
                <div className="flex items-start">
                  <div className="flex-shrink-0 p-2 bg-blue-100 rounded-lg text-blue-600 mr-4">
                    <Zap className="w-6 h-6" />
                  </div>
                  <div>
                    <h3 className="text-xl font-semibold text-gray-900 mb-2">Real-Time Tracking</h3>
                    <p className="text-gray-600">Track your ride in real-time and share your location with friends and family for added safety.</p>
                  </div>
                </div>
                
                <div className="flex items-start">
                  <div className="flex-shrink-0 p-2 bg-green-100 rounded-lg text-green-600 mr-4">
                    <Clock className="w-6 h-6" />
                  </div>
                  <div>
                    <h3 className="text-xl font-semibold text-gray-900 mb-2">Smart Scheduling</h3>
                    <p className="text-gray-600">Book rides in advance and set recurring schedules for your regular commutes.</p>
                  </div>
                </div>
                
                <div className="flex items-start">
                  <div className="flex-shrink-0 p-2 bg-purple-100 rounded-lg text-purple-600 mr-4">
                    <MessageSquare className="w-6 h-6" />
                  </div>
                  <div>
                    <h3 className="text-xl font-semibold text-gray-900 mb-2">In-app Communication</h3>
                    <p className="text-gray-600">Communicate with your driver through our secure in-app messaging system.</p>
                  </div>
                </div>
              </div>
              
              <div className="mt-8">
                <motion.button 
                  className="px-6 py-3 bg-blue-600 text-white font-medium rounded-lg shadow hover:bg-blue-700 transition-colors flex items-center"
                  whileHover={{ scale: 1.03 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <Smartphone className="w-5 h-5 mr-2" />
                  <span>Download the App</span>
                </motion.button>
              </div>
            </motion.div>
            
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              whileInView={{ opacity: 1, scale: 1 }}
              viewport={{ once: true }}
              transition={{ duration: 0.7 }}
              className="relative mx-auto max-w-xs md:max-w-sm"
            >
              <div className="rounded-3xl bg-white shadow-2xl overflow-hidden border-8 border-white">
                <img 
                  src="/api/placeholder/300/600" 
                  alt="App interface" 
                  className="w-full h-auto rounded-2xl"
                />
              </div>
              
              {/* Floating feature highlight boxes */}
              <motion.div 
                className="absolute -top-4 -right-4 bg-white p-3 rounded-lg shadow-lg"
                animate={{ y: [0, 5, 0] }}
                transition={{ repeat: Infinity, duration: 3, ease: "easeInOut" }}
              >
                <div className="flex items-center space-x-2">
                  <Award className="w-5 h-5 text-yellow-500" />
                  <span className="text-sm font-medium">Top Rated</span>
                </div>
              </motion.div>
              
              <motion.div 
                className="absolute bottom-20 -left-8 bg-white p-3 rounded-lg shadow-lg"
                animate={{ y: [0, -5, 0] }}
                transition={{ repeat: Infinity, duration: 4, ease: "easeInOut", delay: 1 }}
              >
                <div className="flex items-center space-x-2">
                  <MapPin className="w-5 h-5 text-blue-600" />
                  <span className="text-sm font-medium">Live Tracking</span>
                </div>
              </motion.div>
            </motion.div>
          </div>
        </div>
      </section>

      {/* How It Works Section with Timeline */}
      <section id="howItWorks" ref={howItWorksRef} className="py-20 px-4 md:px-8 bg-white">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5 }}
              className="inline-block px-3 py-1 rounded-full bg-blue-100 text-blue-600 font-medium text-sm mb-4"
            >
              Simple Process
            </motion.div>
            <motion.h2 
              className="text-3xl md:text-4xl font-bold text-gray-900 mb-4"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.1 }}
            >
              How It Works
            </motion.h2>
            <motion.p 
              className="text-xl text-gray-600 max-w-3xl mx-auto"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.2 }}
            >
              Our streamlined process ensures a hassle-free experience from booking to destination.
            </motion.p>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 relative">
            {/* Connection line for desktop */}
            <div className="hidden md:block absolute top-32 left-0 right-0 h-1 bg-blue-100 z-0"></div>
            
            <motion.div 
              className="relative z-10"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.6 }}
              whileHover={{ y: -8 }}
            >
              <div className="bg-white rounded-xl overflow-hidden shadow-lg">
                <div className="p-6">
                  <div className="bg-blue-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-6">
                    <span className="text-2xl font-bold text-blue-600">1</span>
                  </div>
                  <h3 className="text-xl font-semibold mb-4 text-center">Request a Ride</h3>
                  <p className="text-gray-600 text-center mb-6">Enter your destination and choose your ride type based on your needs.</p>
                  <img src="/api/placeholder/300/200" alt="Request a ride" className="w-full h-auto rounded-lg mb-4" />
                  <div className="flex justify-center">
                    <a href="#" className="text-blue-600 font-medium flex items-center hover:underline">
                      Learn more
                      <ArrowRight className="ml-2 w-4 h-4" />
                    </a>
                  </div>
                </div>
              </div>
            </motion.div>
            
            <motion.div 
              className="relative z-10"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.6, delay: 0.2 }}
              whileHover={{ y: -8 }}
            >
              <div className="bg-white rounded-xl overflow-hidden shadow-lg">
                <div className="p-6">
                  <div className="bg-blue-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-6">
                    <span className="text-2xl font-bold text-blue-600">2</span>
                  </div>
                  <h3 className="text-xl font-semibold mb-4 text-center">Get Matched</h3>
                  <p className="text-gray-600 text-center mb-6">Our intelligent algorithm will connect you with the nearest available driver.</p>
                  <img src="/api/placeholder/300/200" alt="Get matched" className="w-full h-auto rounded-lg mb-4" />
                  <div className="flex justify-center">
                    <a href="#" className="text-blue-600 font-medium flex items-center hover:underline">
                      Learn more
                      <ArrowRight className="ml-2 w-4 h-4" />
                    </a>
                  </div>
                </div>
              </div>
            </motion.div>
            
            <motion.div 
              className="relative z-10"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.6, delay: 0.4 }}
              whileHover={{ y: -8 }}
            >
              <div className="bg-white rounded-xl overflow-hidden shadow-lg">
                <div className="p-6">
                  <div className="bg-blue-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-6">
                    <span className="text-2xl font-bold text-blue-600">3</span>
                  </div>
                  <h3 className="text-xl font-semibold mb-4 text-center">Enjoy Your Ride</h3>
                  <p className="text-gray-600 text-center mb-6">Track your journey in real-time and pay seamlessly through the app.</p>
                  <img src="/api/placeholder/300/200" alt="Enjoy your ride" className="w-full h-auto rounded-lg mb-4" />
                  <div className="flex justify-center">
                    <a href="#" className="text-blue-600 font-medium flex items-center hover:underline">
                      Learn more
                      <ArrowRight className="ml-2 w-4 h-4" />
                    </a>
                  </div>
                </div>
              </div>
            </motion.div>
          </div>
          
          <div className="mt-16 text-center">
            <motion.button 
              className="px-8 py-3 bg-blue-600 text-white font-medium rounded-lg shadow hover:bg-blue-700 transition-colors inline-flex items-center"
              whileHover={{ scale: 1.03 }}
              whileTap={{ scale: 0.98 }}
            >
              <span>Get Started Now</span>
              <ArrowRight className="ml-2 w-5 h-5" />
            </motion.button>
          </div>
        </div>
      </section>

      {/* Pricing Section */}
      <section id="pricing" ref={pricingRef} className="py-20 px-4 md:px-8 bg-blue-50">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5 }}
              className="inline-block px-3 py-1 rounded-full bg-blue-100 text-blue-600 font-medium text-sm mb-4"
            >
              Pricing Plans
            </motion.div>
            <motion.h2 
              className="text-3xl md:text-4xl font-bold text-gray-900 mb-4"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.1 }}
            >
              Choose the Perfect Plan for You
            </motion.h2>
            <motion.p 
              className="text-xl text-gray-600 max-w-3xl mx-auto"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.2 }}
            >
              We offer flexible plans to meet your needs, whether you're an occasional rider or a frequent commuter.
            </motion.p>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {pricingPlans.map((plan, index) => (
              <motion.div
                key={index}
                className={`${plan.color} rounded-2xl overflow-hidden transition-all ${plan.highlighted ? 'shadow-2xl ring-2 ring-blue-500 md:-mt-4 md:-mb-4' : 'shadow-xl hover:shadow-2xl'}`}
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ duration: 0.6, delay: index * 0.1 }}
                whileHover={{ y: plan.highlighted ? 0 : -8 }}
              >
                {plan.highlighted && (
                  <div className="bg-blue-600 py-2 text-center text-white text-sm font-bold">
                    MOST POPULAR
                  </div>
                )}
                <div className="p-8">
                  <h3 className="text-2xl font-bold mb-2 text-gray-900">{plan.name}</h3>
                  <p className="text-gray-600 mb-6">{plan.description}</p>
                  <div className="mb-6">
                    <span className="text-4xl font-bold text-gray-900">{plan.price}</span>
                    <span className="text-gray-600 ml-2">{plan.period}</span>
                  </div>
                  <ul className="space-y-4 mb-8">
                    {plan.features.map((feature, idx) => (
                      <li key={idx} className="flex items-start">
                        <CheckCircle className="w-5 h-5 text-green-500 mr-3 flex-shrink-0 mt-0.5" />
                        <span className="text-gray-700">{feature}</span>
                      </li>
                    ))}
                  </ul>
                  <motion.button 
                    className={`w-full py-3 rounded-lg font-medium transition-colors ${plan.highlighted ? 'bg-blue-600 text-white hover:bg-blue-700' : 'bg-white text-blue-600 border border-blue-200 hover:bg-blue-50'}`}
                    whileHover={{ scale: 1.03 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    {plan.cta}
                  </motion.button>
                </div>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* Testimonials Section with Continuous Scrolling */}
      <section id="testimonials" ref={testimonialsRef} className="py-20 px-4 md:px-8 bg-white">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5 }}
              className="inline-block px-3 py-1 rounded-full bg-blue-100 text-blue-600 font-medium text-sm mb-4"
            >
              Testimonials
            </motion.div>
            <motion.h2 
              className="text-3xl md:text-4xl font-bold text-gray-900 mb-4"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.1 }}
            >
              What Our Users Say
            </motion.h2>
            <motion.p 
              className="text-xl text-gray-600 max-w-3xl mx-auto"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.2 }}
            >
              Don't just take our word for it — see what our users have to say about their experience with LogistiQ.
            </motion.p>
          </div>
          
          <div 
            ref={testimonialContainerRef}
            className="flex overflow-x-auto scrollbar-hide pb-8 -mx-4 px-4 snap-x snap-mandatory gap-6"
            style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}
          >
            {testimonials.map((testimonial, index) => (
              <motion.div
                key={index}
                className={`flex-shrink-0 w-full sm:w-96 ${testimonial.bgColor} rounded-xl p-6 shadow-lg snap-center`}
                initial={{ opacity: 0, scale: 0.9 }}
                whileInView={{ opacity: 1, scale: 1 }}
                viewport={{ once: true, margin: "-100px" }}
                transition={{ duration: 0.5 }}
                whileHover={{ y: -5 }}
              >
                <div className="flex items-center mb-6">
                  <img 
                    src={testimonial.image}
                    alt={testimonial.name}
                    className="w-14 h-14 rounded-full mr-4 object-cover"
                  />
                  <div>
                    <h4 className="text-lg font-semibold text-gray-900">{testimonial.name}</h4>
                    <p className="text-gray-600">{testimonial.role}</p>
                  </div>
                </div>
                <div className="flex mb-4">
                  {[...Array(5)].map((_, i) => (
                    <Star 
                      key={i} 
                      className={`w-5 h-5 ${i < testimonial.rating ? 'text-yellow-400 fill-current' : 'text-gray-300'}`} 
                    />
                  ))}
                </div>
                <p className="text-gray-700 mb-4 italic">"{testimonial.content}"</p>
              </motion.div>
            ))}
          </div>
          
          <div className="flex justify-center mt-8">
            <motion.button 
              className="px-6 py-2 bg-white text-blue-600 font-medium rounded-lg shadow border border-blue-200 hover:bg-blue-50 transition-colors"
              whileHover={{ scale: 1.03 }}
              whileTap={{ scale: 0.98 }}
            >
              View All Reviews
            </motion.button>
          </div>
        </div>
      </section>

      {/* Alternate CTA with App Download */}
      <section className="py-20 px-4 md:px-8 bg-gradient-to-r from-blue-600 to-blue-800 text-white relative overflow-hidden">
        <div className="absolute top-0 left-0 w-full h-full opacity-10">
          <div className="absolute transform rotate-45 -top-20 -left-20 w-40 h-40 bg-white rounded-full"></div>
          <div className="absolute transform rotate-45 top-20 right-20 w-60 h-60 bg-white rounded-full"></div>
          <div className="absolute transform rotate-45 bottom-20 left-40 w-80 h-80 bg-white rounded-full"></div>
        </div>
        
        <div className="max-w-7xl mx-auto relative">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-16 items-center">
            <motion.div
              initial={{ opacity: 0, x: -30 }}
              whileInView={{ opacity: 1, x: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.7 }}
            >
              <h2 className="text-3xl md:text-4xl font-bold mb-6">
                Ready to Transform Your Ride Experience?
              </h2>
              <p className="text-xl text-blue-100 mb-8">
                Join thousands of satisfied users who have made the switch to our innovative ride-sharing platform. Download our app today!
              </p>
              <div className="flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4">
                <motion.button 
                  className="px-6 py-3 bg-white text-blue-600 font-medium rounded-lg shadow hover:bg-blue-50 transition-colors flex items-center justify-center"
                  whileHover={{ scale: 1.03 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <svg className="w-6 h-6 mr-2" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M17.707,9.293l-5-5c-0.391-0.391-1.024-0.391-1.414,0l-5,5c-0.391,0.391-0.391,1.024,0,1.414 s1.024,0.391,1.414,0L12,7.414l4.293,4.293C16.488,11.902,16.744,12,17,12s0.512-0.098,0.707-0.293 C18.098,11.317,18.098,10.683,17.707,9.293z"/>
                    <path d="M12,18c-0.553,0-1-0.447-1-1V6c0-0.553,0.447-1,1-1s1,0.447,1,1v11C13,17.553,12.553,18,12,18z"/>
                  </svg>
                  <span>App Store</span>
                </motion.button>
                <motion.button 
                  className="px-6 py-3 bg-white text-blue-600 font-medium rounded-lg shadow hover:bg-blue-50 transition-colors flex items-center justify-center"
                  whileHover={{ scale: 1.03 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <svg className="w-6 h-6 mr-2" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M20.9,10.37a2.06,2.06,0,0,0-1.1-1.81l0,0L7.87,1a2.12,2.12,0,0,0-3.16,1.62L4.75,14.2h0a2.34,2.34,0,0,0,0,.38,2.09,2.09,0,0,0,2.8,1.74l11.93-4.8a2.11,2.11,0,0,0,1.42-1.88ZM5.9,15.3a1,1,0,0,1-.77-.36,1,1,0,0,1-.23-.82h0L5,2.79a1,1,0,0,1,.46-.76,1,1,0,0,1,.85-.09L18.3,8.55h0a1,1,0,0,1,.6.82,1,1,0,0,1-.6.95L6.37,15.12A1,1,0,0,1,5.9,15.3Z"/>
                  </svg>
                  <span>Google Play</span>
                </motion.button>
              </div>
            </motion.div>
            
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.7, delay: 0.2 }}
              className="relative mx-auto max-w-xs"
            >
              <div className="relative">
                <img 
                  src="/api/placeholder/300/600" 
                  alt="Mobile app" 
                  className="mx-auto rounded-3xl shadow-2xl border-4 border-white"
                />
                <div className="absolute -top-4 -right-4 bg-yellow-400 text-yellow-800 text-sm font-bold py-1 px-3 rounded-full">
                  NEW!
                </div>
              </div>
            </motion.div>
          </div>
        </div>
      </section>

      {/* Contact Section with Map */}
      <section id="contact" ref={contactRef} className="py-20 px-4 md:px-8 bg-white">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5 }}
              className="inline-block px-3 py-1 rounded-full bg-blue-100 text-blue-600 font-medium text-sm mb-4"
            >
              Contact
            </motion.div>
            <motion.h2 
              className="text-3xl md:text-4xl font-bold text-gray-900 mb-4"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.1 }}
            >
              Get in Touch
            </motion.h2>
            <motion.p 
              className="text-xl text-gray-600 max-w-3xl mx-auto"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.2 }}
            >
              Have questions or need support? Our team is here to help you.
            </motion.p>
          </div>
          
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
            <motion.div
              initial={{ opacity: 0, x: -30 }}
              whileInView={{ opacity: 1, x: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.6 }}
            >
              <div className="bg-white rounded-xl shadow-xl p-8">
                <h3 className="text-2xl font-bold text-gray-900 mb-6">Send us a message</h3>
                <form>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                    <div>
                      <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-2">
                        Your Name
                      </label>
                      <input
                        type="text"
                        id="name"
                        className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="John Doe"
                      />
                    </div>
                    <div>
                      <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
                        Email Address
                      </label>
                      <input
                        type="email"
                        id="email"
                        className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="john@example.com"
                      />
                    </div>
                  </div>
                  <div className="mb-6">
                    <label htmlFor="subject" className="block text-sm font-medium text-gray-700 mb-2">
                      Subject
                    </label>
                    <input
                      type="text"
                      id="subject"
                      className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="How can we help you?"
                    />
                  </div>
                  <div className="mb-6">
                    <label htmlFor="message" className="block text-sm font-medium text-gray-700 mb-2">
                      Message
                    </label>
                    <textarea
                      id="message"
                      rows={4}
                      className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Your message..."
                    ></textarea>
                  </div>
                  <motion.button 
                    type="submit"
                    className="px-8 py-3 bg-blue-600 text-white font-medium rounded-lg shadow hover:bg-blue-700 transition-colors"
                    whileHover={{ scale: 1.03 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    Send Message
                  </motion.button>
                </form>
              </div>
            </motion.div>
            
            <motion.div
              initial={{ opacity: 0, x: 30 }}
              whileInView={{ opacity: 1, x: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.6, delay: 0.2 }}
            >
              <div className="bg-white rounded-xl shadow-xl overflow-hidden h-full">
                <div className="h-64 bg-gray-200 relative">
                  <img
                    src="/api/placeholder/800/400"
                    alt="Map location"
                    className="w-full h-full object-cover"
                  />
                  <div className="absolute inset-0 flex items-center justify-center">
                    <MapPin className="w-12 h-12 text-blue-600" />
                  </div>
                </div>
                <div className="p-8">
                  <h3 className="text-2xl font-bold text-gray-900 mb-6">Contact Information</h3>
                  <div className="space-y-6">
                    <div className="flex items-start">
                      <div className="flex-shrink-0 p-2 bg-blue-100 rounded-lg text-blue-600 mr-4">
                        <MapPin className="w-6 h-6" />
                      </div>
                      <div>
                        <h4 className="text-lg font-semibold text-gray-900 mb-1">Office Address</h4>
                        <p className="text-gray-600">123 Main Street, Suite 456<br />New York, NY 10001</p>
                      </div>
                    </div>
                    
                    <div className="flex items-start">
                      <div className="flex-shrink-0 p-2 bg-green-100 rounded-lg text-green-600 mr-4">
                        <Phone className="w-6 h-6" />
                      </div>
                      <div>
                        <h4 className="text-lg font-semibold text-gray-900 mb-1">Phone</h4>
                        <p className="text-gray-600">+1 (555) 123-4567</p>
                        <p className="text-gray-600">+1 (555) 987-6543</p>
                      </div>
                    </div>
                    
                    <div className="flex items-start">
                      <div className="flex-shrink-0 p-2 bg-purple-100 rounded-lg text-purple-600 mr-4">
                        <Mail className="w-6 h-6" />
                      </div>
                      <div>
                        <h4 className="text-lg font-semibold text-gray-900 mb-1">Email</h4>
                        <p className="text-gray-600">support@logistiq.com</p>
                        <p className="text-gray-600">info@logistiq.com</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </motion.div>
          </div>
        </div>
      </section>

      {/* Newsletter Section with Gradient */}
      <section className="py-16 px-4 md:px-8 bg-gradient-to-r from-blue-50 to-indigo-50">
        <div className="max-w-6xl mx-auto">
          <div className="bg-white rounded-2xl shadow-xl p-8 md:p-12">
            <div className="flex flex-col md:flex-row items-center justify-between">
              <div className="mb-8 md:mb-0 md:mr-8">
                <h3 className="text-2xl md:text-3xl font-bold text-gray-900 mb-3">Stay Updated</h3>
                <p className="text-gray-600">Subscribe to our newsletter for the latest updates, promotions, and tips.</p>
              </div>
              <div className="flex w-full md:w-auto">
                <input 
                  type="email" 
                  placeholder="Enter your email" 
                  className="w-full md:w-80 px-4 py-3 rounded-l-lg border-y border-l border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
                <motion.button 
                  className="bg-blue-600 text-white px-6 py-3 rounded-r-lg hover:bg-blue-700 transition-colors font-medium"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  Subscribe
                </motion.button>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-white pt-16 pb-8">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-12 mb-12">
            <div>
              <div className="text-blue-600 font-bold text-xl flex items-center mb-6">
                <Truck className="w-6 h-6 mr-2" />
                <span>LogistiQ</span>
              </div>
              <p className="text-gray-600 mb-6">
                Transforming the way you travel with innovative ride-sharing solutions.
              </p>
              <div className="flex space-x-4">
                <a href="#" className="text-gray-400 hover:text-blue-600 transition-colors">
                  <Facebook className="w-6 h-6" />
                </a>
                <a href="#" className="text-gray-400 hover:text-blue-600 transition-colors">
                  <Twitter className="w-6 h-6" />
                </a>
                <a href="#" className="text-gray-400 hover:text-blue-600 transition-colors">
                  <Instagram className="w-6 h-6" />
                </a>
              </div>
            </div>
            
            <div>
              <h4 className="text-lg font-semibold mb-6 text-gray-900">Quick Links</h4>
              <ul className="space-y-4">
                <li>
                  <a href="#" className="text-gray-600 hover:text-blue-600 transition-colors flex items-center">
                    <ArrowRight className="w-4 h-4 mr-2" />
                    <span>About Us</span>
                  </a>
                </li>
                <li>
                  <a href="#" className="text-gray-600 hover:text-blue-600 transition-colors flex items-center">
                    <ArrowRight className="w-4 h-4 mr-2" />
                    <span>Services</span>
                  </a>
                </li>
                <li>
                  <a href="#" className="text-gray-600 hover:text-blue-600 transition-colors flex items-center">
                    <ArrowRight className="w-4 h-4 mr-2" />
                    <span>Careers</span>
                  </a>
                </li>
                <li>
                  <a href="#" className="text-gray-600 hover:text-blue-600 transition-colors flex items-center">
                    <ArrowRight className="w-4 h-4 mr-2" />
                    <span>Press</span>
                  </a>
                </li>
                <li>
                  <a href="#" className="text-gray-600 hover:text-blue-600 transition-colors flex items-center">
                    <ArrowRight className="w-4 h-4 mr-2" />
                    <span>Blog</span>
                  </a>
                </li>
              </ul>
            </div>
            
            <div>
              <h4 className="text-lg font-semibold mb-6 text-gray-900">Support</h4>
              <ul className="space-y-4">
                <li>
                  <a href="#" className="text-gray-600 hover:text-blue-600 transition-colors flex items-center">
                    <ArrowRight className="w-4 h-4 mr-2" />
                    <span>Help Center</span>
                  </a>
                </li>
                <li>
                  <a href="#" className="text-gray-600 hover:text-blue-600 transition-colors flex items-center">
                    <ArrowRight className="w-4 h-4 mr-2" />
                    <span>Safety</span>
                  </a>
                </li>
                <li>
                  <a href="#" className="text-gray-600 hover:text-blue-600 transition-colors flex items-center">
                    <ArrowRight className="w-4 h-4 mr-2" />
                    <span>Terms of Service</span>
                  </a>
                </li>
                <li>
                  <a href="#" className="text-gray-600 hover:text-blue-600 transition-colors flex items-center">
                    <ArrowRight className="w-4 h-4 mr-2" />
                    <span>Privacy Policy</span>
                  </a>
                </li>
                <li>
                  <a href="#" className="text-gray-600 hover:text-blue-600 transition-colors flex items-center">
                    <ArrowRight className="w-4 h-4 mr-2" />
                    <span>Accessibility</span>
                  </a>
                </li>
              </ul>
            </div>
            
            <div>
              <h4 className="text-lg font-semibold mb-6 text-gray-900">Contact Us</h4>
              <ul className="space-y-4">
                <li className="flex items-start">
                  <Phone className="w-5 h-5 text-blue-600 mr-3 mt-1" />
                  <span className="text-gray-600">+1 (555) 123-4567</span>
                </li>
                <li className="flex items-start">
                  <Mail className="w-5 h-5 text-blue-600 mr-3 mt-1" />
                  <span className="text-gray-600">support@logistiq.com</span>
                </li>
                <li className="flex items-start">
                  <MapPin className="w-5 h-5 text-blue-600 mr-3 mt-1" />
                  <span className="text-gray-600">123 Main St, New York, NY 10001, USA</span>
                </li>
              </ul>
            </div>
          </div>
          
          <div className="pt-8 border-t border-gray-200">
            <div className="flex flex-col md:flex-row justify-between items-center">
              <p className="text-gray-600 text-sm mb-4 md:mb-0">
                © {new Date().getFullYear()} LogistiQ. All rights reserved.
              </p>
              <div className="flex space-x-6">
                <a href="#" className="text-gray-600 hover:text-blue-600 text-sm transition-colors">
                  Terms
                </a>
                <a href="#" className="text-gray-600 hover:text-blue-600 text-sm transition-colors">
                  Privacy
                </a>
                <a href="#" className="text-gray-600 hover:text-blue-600 text-sm transition-colors">
                  Cookies
                </a>
                <a href="#" className="text-gray-600 hover:text-blue-600 text-sm transition-colors">
                  Security
                </a>
              </div>
            </div>
          </div>
        </div>
      </footer>

      {/* Back to Top Button */}
      <motion.button
        className="fixed bottom-8 right-8 bg-blue-600 text-white p-3 rounded-full shadow-lg hover:bg-blue-700 transition-colors z-40"
        onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
      >
        <ArrowUp className="w-6 h-6" />
      </motion.button>
    </div>
  );
};

export default Home;

================
File: src/utils/api.js
================
// utils/api.js

// export const API_BASE_URL = 'http://localhost:3001';
export const API_BASE_URL = 'http://localhost:3001/';

export const apiCall = async (endpoint, method = 'GET', body = null) => {
  try {
    const response = await apiCall(`${API_BASE_URL}${endpoint}`, {
      method,
      
      headers: {
        'Content-Type': 'application/json',
      },
      body: body ? JSON.stringify(body) : null,
    });

    if (response.status === 401) {
      // Handle unauthorized access
      throw new Error('Unauthorized');
    }

    if (!response.ok) {
      throw new Error('API call failed');
    }

    return await response.json();
  } catch (error) {
    console.error('API call error:', error);
    throw error;
  }
};

================
File: src/utils/cn.js
================
import { clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}

================
File: src/App.css
================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

================
File: src/App.js
================
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import Navbar from './components/Navbar';
import Home from './Pages/Home';
import Auth from './components/Auth';
import BookingComponent from './components/Booking/Booking';
import TrackingComponent from './components/Track/Tracking';
import UserProfile from './components/User/UserProfile';
import DriverDashboard from './components/Driver/DriverDashboard';
import AdminDashboardComponent from './components/Admin/AdminDashboard';
import MyRides from './components/Rides/MyRides';
import ErrorPage from './components/ErrorPage';
import { AuthProvider, useAuth } from './components/context/AuthContext';
import DriverLocationUpdate from './components/Driver/DriverLocationUpdate';
import VehicleManagement from './components/Vehicle/VehicleManagement';
import { SearchProvider } from './components/context/SearchContext';

const ProtectedRoute = ({ children, allowedRoles }) => {
  const { user } = useAuth();
  const token = localStorage.getItem('token');

  if (!user || !token) {
    return <Navigate to="/login" replace />;
  }

  if (allowedRoles && !allowedRoles.includes(user.role)) {
    return <Navigate to="/error" replace />;
  }

  return children;
};

// Separate layout component that uses useAuth
const AppLayout = () => {
  const { user } = useAuth();
  const token = localStorage.getItem('token');

  // Only show navbar if both user and token exist
  return (
    <div className="flex flex-col min-h-screen">
      {user && token && <Navbar />}
      <main className="flex-grow container mx-auto">
        <AppRoutes />
      </main>
      {/* <footer className="bg-grey text-center py-4">
        © 2024 Ride Sharing App. All rights reserved.
      </footer> */}
    </div>
  );
};

function AppRoutes() {
  const { user } = useAuth();
  const token = localStorage.getItem('token');
  return (
    <Routes>
      <Route
        path="/login"
        element={(user && token) ? <Navigate to="/" replace /> : <Auth />}
      />
      <Route path="/error" element={<ErrorPage />} />

      {/* Protected Routes */}
      <Route path="/" element={<ProtectedRoute><Home /></ProtectedRoute>} />
      <Route path="/profile" element={<ProtectedRoute><UserProfile /></ProtectedRoute>} />
      <Route path="/tracking" element={<ProtectedRoute><TrackingComponent /></ProtectedRoute>} />

      {/* Customer Routes */}
      {user?.role === 'customer' && (
        <>
          <Route path="/book" element={<ProtectedRoute><BookingComponent /></ProtectedRoute>} />
          <Route path="/rides" element={<ProtectedRoute><MyRides /></ProtectedRoute>} />
        </>
      )}

      {/* Driver Routes */}
      {user?.role === 'driver' && (
        <>
          <Route path="/driver/dashboard" element={<ProtectedRoute><DriverDashboard /></ProtectedRoute>} />
          <Route path="/driver/update-location" element={<ProtectedRoute><DriverLocationUpdate /></ProtectedRoute>} />
          <Route path="/driver/vehicles" element={<ProtectedRoute><VehicleManagement /></ProtectedRoute>} />
        </>
      )}

      {/* Admin Routes */}
      {user?.role === 'admin' && (
        <Route path="/admin" element={<ProtectedRoute><AdminDashboardComponent /></ProtectedRoute>} />
      )}
    </Routes>
  );
}

// Main App component doesn't use useAuth directly
function App() {
  return (
    <AuthProvider>
          <SearchProvider>
      <Router>
        <AppLayout />
      </Router>
      </SearchProvider>
    </AuthProvider>
  );
}

export default App;

================
File: src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Add these styles to your global CSS or component-specific CSS */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-fadeIn {
  animation: fadeIn 0.5s ease-out;
}

.animate-slideUp {
  animation: slideUp 0.5s ease-out;
}

.animate-pulse {
  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.animate-fadeIn {
  animation: fadeIn 0.5s ease-out;
}

/* Add this to ensure the map container is visible */
.google-map {
  width: 100%;
  height: 100%;
  min-height: 300px;
}

/* Prevent content overflow */
.overflow-y-auto {
  -webkit-overflow-scrolling: touch;
}

================
File: src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css'
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

.env
# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: package.json
================
{
  "name": "ride-sharing-frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@chakra-ui/react": "^2.10.2",
    "@emotion/react": "^11.13.3",
    "@emotion/styled": "^11.13.0",
    "@headlessui/react": "^2.1.10",
    "@heroicons/react": "^2.1.5",
    "@react-google-maps/api": "^2.20.3",
    "@react-three/drei": "^9.114.3",
    "@react-three/fiber": "^8.17.10",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "chart.js": "^4.4.5",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "dotenv": "^16.4.5",
    "dotenv-expand": "^11.0.6",
    "framer-motion": "^11.18.2",
    "gsap": "^3.12.5",
    "lucide-react": "^0.453.0",
    "node-cron": "^3.0.3",
    "react": "^18.3.1",
    "react-chartjs-2": "^5.2.0",
    "react-datepicker": "^7.5.0",
    "react-dom": "^18.3.1",
    "react-icons": "^5.3.0",
    "react-router-dom": "^6.27.0",
    "react-scripts": "5.0.1",
    "recharts": "^2.13.0",
    "repomix": "^0.2.39",
    "repopack": "^0.1.43",
    "shadcn-ui": "^0.9.2",
    "socket.io-client": "^4.8.0",
    "swiper": "^11.1.14",
    "tailwind-merge": "^3.0.2",
    "three": "^0.169.0",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "autoprefixer": "^10.4.21",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.17"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
    "./public/index.html",
  ],
  theme: {
    extend: {
      fontFamily: {
        'playfair': ['Playfair Display', 'serif'],
        'montserrat': ['Montserrat', 'sans-serif'],
      },
      colors: {
        'gold': '#FFD700',
      },
    },
  },
  plugins: [],
}
